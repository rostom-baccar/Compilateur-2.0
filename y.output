Nonterminals useless in grammar

    Comparator


Terminals unused in grammar

    tSTRING


Rules useless in grammar

   74 Comparator: tINF
   75           | tSUP
   76           | tEQEQ


Rules useless in parser due to conflicts

   38 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV


State 118 conflicts: 8 reduce/reduce


Grammar

    0 $accept: Program $end

    1 Program: Functions

    2 Functions: Function
    3          | Function Functions

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF

    5 FunCall: FunName tPO CallArgs tPF tPV

    6 DecArgs: Type tID NextDecArg
    7        | %empty

    8 NextDecArg: tV DecArgs
    9           | %empty

   10 CallArgs: Operand CallArgNext
   11         | %empty

   12 CallArgNext: tV CallArgs
   13            | %empty

   14 Type: tCONST
   15     | %empty

   16 FunType: tVOID
   17        | tINT

   18 FunName: tMAIN
   19        | tID

   20 Body: Instructions

   21 Instructions: Instruction Instructions
   22             | %empty

   23 Instruction: FunCall
   24            | Print
   25            | ConstDeclarationAndAssign
   26            | VarDeclarationAndAssign
   27            | VarDeclaration
   28            | VarAssign

   29 $@1: %empty

   30 $@2: %empty

   31 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition

   32 $@3: %empty

   33 Instruction: whileCondition tAO $@3 Body tAF

   34 Print: tPRINT tPO PrintArg tPF tPV

   35 PrintArg: tID
   36         | tNB

   37 ConstDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV

   38 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV
   39                        | Type tINT tID tEQUAL tID tPV

   40 $@4: %empty

   41 VarDeclaration: Type tINT tID $@4 NextVar

   42 $@5: %empty

   43 NextVar: Type tV tID $@5 NextVar
   44        | tPV

   45 Operand: FunCall
   46        | Operations
   47        | tID
   48        | tNB

   49 Operations: Operand tADD Operand
   50           | Operand tSUB Operand
   51           | Operand tMUL Operand
   52           | Operand tDIV Operand

   53 VarAssign: tID tEQUAL Operand tPV

   54 $@6: %empty

   55 ifCondition: tIF tPO ifBoolExpression tPF $@6 elseCondition

   56 $@7: %empty

   57 elseCondition: tELSE tAO $@7 Body tAF
   58              | %empty

   59 whileCondition: tWHILE tPO whileBoolExpression tPF

   60 ifBoolExpression: ifComparaison
   61                 | tID
   62                 | tTRUE
   63                 | tFALSE

   64 ifComparaison: Operand tEQEQ Operand
   65              | Operand tINF Operand
   66              | Operand tSUP Operand

   67 whileBoolExpression: whileComparaison
   68                    | tID
   69                    | tTRUE
   70                    | tFALSE

   71 whileComparaison: Operand tEQEQ Operand
   72                 | Operand tINF Operand
   73                 | Operand tSUP Operand


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tMAIN (258) 18
    tIF (259) 55
    tWHILE (260) 59
    tPRINT (261) 34
    tELSE (262) 57
    tAO (263) 4 31 33 57
    tAF (264) 4 31 33 57
    tPO (265) 4 5 34 55 59
    tPF (266) 4 5 34 55 59
    tV (267) 8 12 43
    tPV (268) 5 34 37 38 39 44 53
    tEQUAL (269) 37 38 39 53
    tVOID (270) 16
    tINT (271) 17 37 38 39 41
    tSTRING (272)
    tSUB (273) 50
    tADD (274) 49
    tMUL (275) 51
    tDIV (276) 52
    tINF (277) 65 72
    tSUP (278) 66 73
    tEQEQ (279) 64 71
    tTRUE (280) 62 69
    tFALSE (281) 63 70
    tCONST (282) 14
    tNB <nb> (283) 36 37 38 48
    tID <string> (284) 6 19 35 37 38 39 41 43 47 53 61 68


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    Program (31)
        on left: 1
        on right: 0
    Functions (32)
        on left: 2 3
        on right: 1 3
    Function (33)
        on left: 4
        on right: 2 3
    FunCall (34)
        on left: 5
        on right: 23 45
    DecArgs (35)
        on left: 6 7
        on right: 4 8
    NextDecArg (36)
        on left: 8 9
        on right: 6
    CallArgs (37)
        on left: 10 11
        on right: 5 12
    CallArgNext (38)
        on left: 12 13
        on right: 10
    Type <nb> (39)
        on left: 14 15
        on right: 6 37 38 39 41 43
    FunType (40)
        on left: 16 17
        on right: 4
    FunName (41)
        on left: 18 19
        on right: 4 5
    Body (42)
        on left: 20
        on right: 4 31 33 57
    Instructions (43)
        on left: 21 22
        on right: 20 21
    Instruction (44)
        on left: 23 24 25 26 27 28 31 33
        on right: 21
    $@1 (45)
        on left: 29
        on right: 31
    $@2 (46)
        on left: 30
        on right: 31
    $@3 (47)
        on left: 32
        on right: 33
    Print (48)
        on left: 34
        on right: 24
    PrintArg (49)
        on left: 35 36
        on right: 34
    ConstDeclarationAndAssign (50)
        on left: 37
        on right: 25
    VarDeclarationAndAssign (51)
        on left: 38 39
        on right: 26
    VarDeclaration (52)
        on left: 41
        on right: 27
    $@4 (53)
        on left: 40
        on right: 41
    NextVar (54)
        on left: 43 44
        on right: 41 43
    $@5 (55)
        on left: 42
        on right: 43
    Operand (56)
        on left: 45 46 47 48
        on right: 10 49 50 51 52 53 64 65 66 71 72 73
    Operations (57)
        on left: 49 50 51 52
        on right: 46
    VarAssign (58)
        on left: 53
        on right: 28
    ifCondition (59)
        on left: 55
        on right: 31
    $@6 (60)
        on left: 54
        on right: 55
    elseCondition (61)
        on left: 57 58
        on right: 31 55
    $@7 (62)
        on left: 56
        on right: 57
    whileCondition (63)
        on left: 59
        on right: 33
    ifBoolExpression (64)
        on left: 60 61 62 63
        on right: 55
    ifComparaison (65)
        on left: 64 65 66
        on right: 60
    whileBoolExpression (66)
        on left: 67 68 69 70
        on right: 59
    whileComparaison (67)
        on left: 71 72 73
        on right: 67


State 0

    0 $accept: . Program $end

    tVOID  shift, and go to state 1
    tINT   shift, and go to state 2

    Program    go to state 3
    Functions  go to state 4
    Function   go to state 5
    FunType    go to state 6


State 1

   16 FunType: tVOID .

    $default  reduce using rule 16 (FunType)


State 2

   17 FunType: tINT .

    $default  reduce using rule 17 (FunType)


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 7


State 4

    1 Program: Functions .

    $default  reduce using rule 1 (Program)


State 5

    2 Functions: Function .
    3          | Function . Functions

    tVOID  shift, and go to state 1
    tINT   shift, and go to state 2

    $default  reduce using rule 2 (Functions)

    Functions  go to state 8
    Function   go to state 5
    FunType    go to state 6


State 6

    4 Function: FunType . FunName tPO DecArgs tPF tAO Body tAF

    tMAIN  shift, and go to state 9
    tID    shift, and go to state 10

    FunName  go to state 11


State 7

    0 $accept: Program $end .

    $default  accept


State 8

    3 Functions: Function Functions .

    $default  reduce using rule 3 (Functions)


State 9

   18 FunName: tMAIN .

    $default  reduce using rule 18 (FunName)


State 10

   19 FunName: tID .

    $default  reduce using rule 19 (FunName)


State 11

    4 Function: FunType FunName . tPO DecArgs tPF tAO Body tAF

    tPO  shift, and go to state 12


State 12

    4 Function: FunType FunName tPO . DecArgs tPF tAO Body tAF

    tCONST  shift, and go to state 13

    tID       reduce using rule 15 (Type)
    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 14
    Type     go to state 15


State 13

   14 Type: tCONST .

    $default  reduce using rule 14 (Type)


State 14

    4 Function: FunType FunName tPO DecArgs . tPF tAO Body tAF

    tPF  shift, and go to state 16


State 15

    6 DecArgs: Type . tID NextDecArg

    tID  shift, and go to state 17


State 16

    4 Function: FunType FunName tPO DecArgs tPF . tAO Body tAF

    tAO  shift, and go to state 18


State 17

    6 DecArgs: Type tID . NextDecArg

    tV  shift, and go to state 19

    $default  reduce using rule 9 (NextDecArg)

    NextDecArg  go to state 20


State 18

    4 Function: FunType FunName tPO DecArgs tPF tAO . Body tAF

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tPRINT  shift, and go to state 23
    tCONST  shift, and go to state 13
    tID     shift, and go to state 24

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 25
    Type                       go to state 26
    FunName                    go to state 27
    Body                       go to state 28
    Instructions               go to state 29
    Instruction                go to state 30
    Print                      go to state 31
    ConstDeclarationAndAssign  go to state 32
    VarDeclarationAndAssign    go to state 33
    VarDeclaration             go to state 34
    VarAssign                  go to state 35
    ifCondition                go to state 36
    whileCondition             go to state 37


State 19

    8 NextDecArg: tV . DecArgs

    tCONST  shift, and go to state 13

    tID       reduce using rule 15 (Type)
    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 38
    Type     go to state 15


State 20

    6 DecArgs: Type tID NextDecArg .

    $default  reduce using rule 6 (DecArgs)


State 21

   55 ifCondition: tIF . tPO ifBoolExpression tPF $@6 elseCondition

    tPO  shift, and go to state 39


State 22

   59 whileCondition: tWHILE . tPO whileBoolExpression tPF

    tPO  shift, and go to state 40


State 23

   34 Print: tPRINT . tPO PrintArg tPF tPV

    tPO  shift, and go to state 41


State 24

   19 FunName: tID .
   53 VarAssign: tID . tEQUAL Operand tPV

    tEQUAL  shift, and go to state 42

    $default  reduce using rule 19 (FunName)


State 25

   23 Instruction: FunCall .

    $default  reduce using rule 23 (Instruction)


State 26

   37 ConstDeclarationAndAssign: Type . tINT tID tEQUAL tNB tPV
   38 VarDeclarationAndAssign: Type . tINT tID tEQUAL tNB tPV
   39                        | Type . tINT tID tEQUAL tID tPV
   41 VarDeclaration: Type . tINT tID $@4 NextVar

    tINT  shift, and go to state 43


State 27

    5 FunCall: FunName . tPO CallArgs tPF tPV

    tPO  shift, and go to state 44


State 28

    4 Function: FunType FunName tPO DecArgs tPF tAO Body . tAF

    tAF  shift, and go to state 45


State 29

   20 Body: Instructions .

    $default  reduce using rule 20 (Body)


State 30

   21 Instructions: Instruction . Instructions

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tPRINT  shift, and go to state 23
    tCONST  shift, and go to state 13
    tID     shift, and go to state 24

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 25
    Type                       go to state 26
    FunName                    go to state 27
    Instructions               go to state 46
    Instruction                go to state 30
    Print                      go to state 31
    ConstDeclarationAndAssign  go to state 32
    VarDeclarationAndAssign    go to state 33
    VarDeclaration             go to state 34
    VarAssign                  go to state 35
    ifCondition                go to state 36
    whileCondition             go to state 37


State 31

   24 Instruction: Print .

    $default  reduce using rule 24 (Instruction)


State 32

   25 Instruction: ConstDeclarationAndAssign .

    $default  reduce using rule 25 (Instruction)


State 33

   26 Instruction: VarDeclarationAndAssign .

    $default  reduce using rule 26 (Instruction)


State 34

   27 Instruction: VarDeclaration .

    $default  reduce using rule 27 (Instruction)


State 35

   28 Instruction: VarAssign .

    $default  reduce using rule 28 (Instruction)


State 36

   31 Instruction: ifCondition . tAO $@1 Body tAF $@2 elseCondition

    tAO  shift, and go to state 47


State 37

   33 Instruction: whileCondition . tAO $@3 Body tAF

    tAO  shift, and go to state 48


State 38

    8 NextDecArg: tV DecArgs .

    $default  reduce using rule 8 (NextDecArg)


State 39

   55 ifCondition: tIF tPO . ifBoolExpression tPF $@6 elseCondition

    tMAIN   shift, and go to state 9
    tTRUE   shift, and go to state 49
    tFALSE  shift, and go to state 50
    tNB     shift, and go to state 51
    tID     shift, and go to state 52

    FunCall           go to state 53
    FunName           go to state 27
    Operand           go to state 54
    Operations        go to state 55
    ifBoolExpression  go to state 56
    ifComparaison     go to state 57


State 40

   59 whileCondition: tWHILE tPO . whileBoolExpression tPF

    tMAIN   shift, and go to state 9
    tTRUE   shift, and go to state 58
    tFALSE  shift, and go to state 59
    tNB     shift, and go to state 51
    tID     shift, and go to state 60

    FunCall              go to state 53
    FunName              go to state 27
    Operand              go to state 61
    Operations           go to state 55
    whileBoolExpression  go to state 62
    whileComparaison     go to state 63


State 41

   34 Print: tPRINT tPO . PrintArg tPF tPV

    tNB  shift, and go to state 64
    tID  shift, and go to state 65

    PrintArg  go to state 66


State 42

   53 VarAssign: tID tEQUAL . Operand tPV

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 68
    Operations  go to state 55


State 43

   37 ConstDeclarationAndAssign: Type tINT . tID tEQUAL tNB tPV
   38 VarDeclarationAndAssign: Type tINT . tID tEQUAL tNB tPV
   39                        | Type tINT . tID tEQUAL tID tPV
   41 VarDeclaration: Type tINT . tID $@4 NextVar

    tID  shift, and go to state 69


State 44

    5 FunCall: FunName tPO . CallArgs tPF tPV

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 53
    CallArgs    go to state 70
    FunName     go to state 27
    Operand     go to state 71
    Operations  go to state 55


State 45

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF .

    $default  reduce using rule 4 (Function)


State 46

   21 Instructions: Instruction Instructions .

    $default  reduce using rule 21 (Instructions)


State 47

   31 Instruction: ifCondition tAO . $@1 Body tAF $@2 elseCondition

    $default  reduce using rule 29 ($@1)

    $@1  go to state 72


State 48

   33 Instruction: whileCondition tAO . $@3 Body tAF

    $default  reduce using rule 32 ($@3)

    $@3  go to state 73


State 49

   62 ifBoolExpression: tTRUE .

    $default  reduce using rule 62 (ifBoolExpression)


State 50

   63 ifBoolExpression: tFALSE .

    $default  reduce using rule 63 (ifBoolExpression)


State 51

   48 Operand: tNB .

    $default  reduce using rule 48 (Operand)


State 52

   19 FunName: tID .
   47 Operand: tID .
   61 ifBoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 61 (ifBoolExpression)
    $default  reduce using rule 47 (Operand)


State 53

   45 Operand: FunCall .

    $default  reduce using rule 45 (Operand)


State 54

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   64 ifComparaison: Operand . tEQEQ Operand
   65              | Operand . tINF Operand
   66              | Operand . tSUP Operand

    tSUB   shift, and go to state 74
    tADD   shift, and go to state 75
    tMUL   shift, and go to state 76
    tDIV   shift, and go to state 77
    tINF   shift, and go to state 78
    tSUP   shift, and go to state 79
    tEQEQ  shift, and go to state 80


State 55

   46 Operand: Operations .

    $default  reduce using rule 46 (Operand)


State 56

   55 ifCondition: tIF tPO ifBoolExpression . tPF $@6 elseCondition

    tPF  shift, and go to state 81


State 57

   60 ifBoolExpression: ifComparaison .

    $default  reduce using rule 60 (ifBoolExpression)


State 58

   69 whileBoolExpression: tTRUE .

    $default  reduce using rule 69 (whileBoolExpression)


State 59

   70 whileBoolExpression: tFALSE .

    $default  reduce using rule 70 (whileBoolExpression)


State 60

   19 FunName: tID .
   47 Operand: tID .
   68 whileBoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 68 (whileBoolExpression)
    $default  reduce using rule 47 (Operand)


State 61

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   71 whileComparaison: Operand . tEQEQ Operand
   72                 | Operand . tINF Operand
   73                 | Operand . tSUP Operand

    tSUB   shift, and go to state 74
    tADD   shift, and go to state 75
    tMUL   shift, and go to state 76
    tDIV   shift, and go to state 77
    tINF   shift, and go to state 82
    tSUP   shift, and go to state 83
    tEQEQ  shift, and go to state 84


State 62

   59 whileCondition: tWHILE tPO whileBoolExpression . tPF

    tPF  shift, and go to state 85


State 63

   67 whileBoolExpression: whileComparaison .

    $default  reduce using rule 67 (whileBoolExpression)


State 64

   36 PrintArg: tNB .

    $default  reduce using rule 36 (PrintArg)


State 65

   35 PrintArg: tID .

    $default  reduce using rule 35 (PrintArg)


State 66

   34 Print: tPRINT tPO PrintArg . tPF tPV

    tPF  shift, and go to state 86


State 67

   19 FunName: tID .
   47 Operand: tID .

    tPO       reduce using rule 19 (FunName)
    $default  reduce using rule 47 (Operand)


State 68

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   53 VarAssign: tID tEQUAL Operand . tPV

    tPV   shift, and go to state 87
    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77


State 69

   37 ConstDeclarationAndAssign: Type tINT tID . tEQUAL tNB tPV
   38 VarDeclarationAndAssign: Type tINT tID . tEQUAL tNB tPV
   39                        | Type tINT tID . tEQUAL tID tPV
   41 VarDeclaration: Type tINT tID . $@4 NextVar

    tEQUAL  shift, and go to state 88

    $default  reduce using rule 40 ($@4)

    $@4  go to state 89


State 70

    5 FunCall: FunName tPO CallArgs . tPF tPV

    tPF  shift, and go to state 90


State 71

   10 CallArgs: Operand . CallArgNext
   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand

    tV    shift, and go to state 91
    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 13 (CallArgNext)

    CallArgNext  go to state 92


State 72

   31 Instruction: ifCondition tAO $@1 . Body tAF $@2 elseCondition

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tPRINT  shift, and go to state 23
    tCONST  shift, and go to state 13
    tID     shift, and go to state 24

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 25
    Type                       go to state 26
    FunName                    go to state 27
    Body                       go to state 93
    Instructions               go to state 29
    Instruction                go to state 30
    Print                      go to state 31
    ConstDeclarationAndAssign  go to state 32
    VarDeclarationAndAssign    go to state 33
    VarDeclaration             go to state 34
    VarAssign                  go to state 35
    ifCondition                go to state 36
    whileCondition             go to state 37


State 73

   33 Instruction: whileCondition tAO $@3 . Body tAF

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tPRINT  shift, and go to state 23
    tCONST  shift, and go to state 13
    tID     shift, and go to state 24

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 25
    Type                       go to state 26
    FunName                    go to state 27
    Body                       go to state 94
    Instructions               go to state 29
    Instruction                go to state 30
    Print                      go to state 31
    ConstDeclarationAndAssign  go to state 32
    VarDeclarationAndAssign    go to state 33
    VarDeclaration             go to state 34
    VarAssign                  go to state 35
    ifCondition                go to state 36
    whileCondition             go to state 37


State 74

   50 Operations: Operand tSUB . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 95
    Operations  go to state 55


State 75

   49 Operations: Operand tADD . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 96
    Operations  go to state 55


State 76

   51 Operations: Operand tMUL . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 97
    Operations  go to state 55


State 77

   52 Operations: Operand tDIV . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 98
    Operations  go to state 55


State 78

   65 ifComparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 99
    Operations  go to state 55


State 79

   66 ifComparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 100
    Operations  go to state 55


State 80

   64 ifComparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 101
    Operations  go to state 55


State 81

   55 ifCondition: tIF tPO ifBoolExpression tPF . $@6 elseCondition

    $default  reduce using rule 54 ($@6)

    $@6  go to state 102


State 82

   72 whileComparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 103
    Operations  go to state 55


State 83

   73 whileComparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 104
    Operations  go to state 55


State 84

   71 whileComparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    FunCall     go to state 53
    FunName     go to state 27
    Operand     go to state 105
    Operations  go to state 55


State 85

   59 whileCondition: tWHILE tPO whileBoolExpression tPF .

    $default  reduce using rule 59 (whileCondition)


State 86

   34 Print: tPRINT tPO PrintArg tPF . tPV

    tPV  shift, and go to state 106


State 87

   53 VarAssign: tID tEQUAL Operand tPV .

    $default  reduce using rule 53 (VarAssign)


State 88

   37 ConstDeclarationAndAssign: Type tINT tID tEQUAL . tNB tPV
   38 VarDeclarationAndAssign: Type tINT tID tEQUAL . tNB tPV
   39                        | Type tINT tID tEQUAL . tID tPV

    tNB  shift, and go to state 107
    tID  shift, and go to state 108


State 89

   41 VarDeclaration: Type tINT tID $@4 . NextVar

    tPV     shift, and go to state 109
    tCONST  shift, and go to state 13

    $default  reduce using rule 15 (Type)

    Type     go to state 110
    NextVar  go to state 111


State 90

    5 FunCall: FunName tPO CallArgs tPF . tPV

    tPV  shift, and go to state 112


State 91

   12 CallArgNext: tV . CallArgs

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 51
    tID    shift, and go to state 67

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 53
    CallArgs    go to state 113
    FunName     go to state 27
    Operand     go to state 71
    Operations  go to state 55


State 92

   10 CallArgs: Operand CallArgNext .

    $default  reduce using rule 10 (CallArgs)


State 93

   31 Instruction: ifCondition tAO $@1 Body . tAF $@2 elseCondition

    tAF  shift, and go to state 114


State 94

   33 Instruction: whileCondition tAO $@3 Body . tAF

    tAF  shift, and go to state 115


State 95

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   50           | Operand tSUB Operand .
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand

    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 50 (Operations)


State 96

   49 Operations: Operand . tADD Operand
   49           | Operand tADD Operand .
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand

    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 49 (Operations)


State 97

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   51           | Operand tMUL Operand .
   52           | Operand . tDIV Operand

    $default  reduce using rule 51 (Operations)


State 98

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   52           | Operand tDIV Operand .

    $default  reduce using rule 52 (Operations)


State 99

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   65 ifComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 65 (ifComparaison)


State 100

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   66 ifComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 66 (ifComparaison)


State 101

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   64 ifComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 64 (ifComparaison)


State 102

   55 ifCondition: tIF tPO ifBoolExpression tPF $@6 . elseCondition

    tELSE  shift, and go to state 116

    $default  reduce using rule 58 (elseCondition)

    elseCondition  go to state 117


State 103

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   72 whileComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 72 (whileComparaison)


State 104

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   73 whileComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 73 (whileComparaison)


State 105

   49 Operations: Operand . tADD Operand
   50           | Operand . tSUB Operand
   51           | Operand . tMUL Operand
   52           | Operand . tDIV Operand
   71 whileComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 74
    tADD  shift, and go to state 75
    tMUL  shift, and go to state 76
    tDIV  shift, and go to state 77

    $default  reduce using rule 71 (whileComparaison)


State 106

   34 Print: tPRINT tPO PrintArg tPF tPV .

    $default  reduce using rule 34 (Print)


State 107

   37 ConstDeclarationAndAssign: Type tINT tID tEQUAL tNB . tPV
   38 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB . tPV

    tPV  shift, and go to state 118


State 108

   39 VarDeclarationAndAssign: Type tINT tID tEQUAL tID . tPV

    tPV  shift, and go to state 119


State 109

   44 NextVar: tPV .

    $default  reduce using rule 44 (NextVar)


State 110

   43 NextVar: Type . tV tID $@5 NextVar

    tV  shift, and go to state 120


State 111

   41 VarDeclaration: Type tINT tID $@4 NextVar .

    $default  reduce using rule 41 (VarDeclaration)


State 112

    5 FunCall: FunName tPO CallArgs tPF tPV .

    $default  reduce using rule 5 (FunCall)


State 113

   12 CallArgNext: tV CallArgs .

    $default  reduce using rule 12 (CallArgNext)


State 114

   31 Instruction: ifCondition tAO $@1 Body tAF . $@2 elseCondition

    $default  reduce using rule 30 ($@2)

    $@2  go to state 121


State 115

   33 Instruction: whileCondition tAO $@3 Body tAF .

    $default  reduce using rule 33 (Instruction)


State 116

   57 elseCondition: tELSE . tAO $@7 Body tAF

    tAO  shift, and go to state 122


State 117

   55 ifCondition: tIF tPO ifBoolExpression tPF $@6 elseCondition .

    $default  reduce using rule 55 (ifCondition)


State 118

   37 ConstDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV .
   38 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV .

    tMAIN     reduce using rule 37 (ConstDeclarationAndAssign)
    tMAIN     [reduce using rule 38 (VarDeclarationAndAssign)]
    tIF       reduce using rule 37 (ConstDeclarationAndAssign)
    tIF       [reduce using rule 38 (VarDeclarationAndAssign)]
    tWHILE    reduce using rule 37 (ConstDeclarationAndAssign)
    tWHILE    [reduce using rule 38 (VarDeclarationAndAssign)]
    tPRINT    reduce using rule 37 (ConstDeclarationAndAssign)
    tPRINT    [reduce using rule 38 (VarDeclarationAndAssign)]
    tAF       reduce using rule 37 (ConstDeclarationAndAssign)
    tAF       [reduce using rule 38 (VarDeclarationAndAssign)]
    tINT      reduce using rule 37 (ConstDeclarationAndAssign)
    tINT      [reduce using rule 38 (VarDeclarationAndAssign)]
    tCONST    reduce using rule 37 (ConstDeclarationAndAssign)
    tCONST    [reduce using rule 38 (VarDeclarationAndAssign)]
    tID       reduce using rule 37 (ConstDeclarationAndAssign)
    tID       [reduce using rule 38 (VarDeclarationAndAssign)]
    $default  reduce using rule 37 (ConstDeclarationAndAssign)


State 119

   39 VarDeclarationAndAssign: Type tINT tID tEQUAL tID tPV .

    $default  reduce using rule 39 (VarDeclarationAndAssign)


State 120

   43 NextVar: Type tV . tID $@5 NextVar

    tID  shift, and go to state 123


State 121

   31 Instruction: ifCondition tAO $@1 Body tAF $@2 . elseCondition

    tELSE  shift, and go to state 116

    $default  reduce using rule 58 (elseCondition)

    elseCondition  go to state 124


State 122

   57 elseCondition: tELSE tAO . $@7 Body tAF

    $default  reduce using rule 56 ($@7)

    $@7  go to state 125


State 123

   43 NextVar: Type tV tID . $@5 NextVar

    $default  reduce using rule 42 ($@5)

    $@5  go to state 126


State 124

   31 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition .

    $default  reduce using rule 31 (Instruction)


State 125

   57 elseCondition: tELSE tAO $@7 . Body tAF

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tPRINT  shift, and go to state 23
    tCONST  shift, and go to state 13
    tID     shift, and go to state 24

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 25
    Type                       go to state 26
    FunName                    go to state 27
    Body                       go to state 127
    Instructions               go to state 29
    Instruction                go to state 30
    Print                      go to state 31
    ConstDeclarationAndAssign  go to state 32
    VarDeclarationAndAssign    go to state 33
    VarDeclaration             go to state 34
    VarAssign                  go to state 35
    ifCondition                go to state 36
    whileCondition             go to state 37


State 126

   43 NextVar: Type tV tID $@5 . NextVar

    tPV     shift, and go to state 109
    tCONST  shift, and go to state 13

    $default  reduce using rule 15 (Type)

    Type     go to state 110
    NextVar  go to state 128


State 127

   57 elseCondition: tELSE tAO $@7 Body . tAF

    tAF  shift, and go to state 129


State 128

   43 NextVar: Type tV tID $@5 NextVar .

    $default  reduce using rule 43 (NextVar)


State 129

   57 elseCondition: tELSE tAO $@7 Body tAF .

    $default  reduce using rule 57 (elseCondition)
