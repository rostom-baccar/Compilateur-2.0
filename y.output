Nonterminals useless in grammar

    Comparator


Terminals unused in grammar

    tPRINT


Rules useless in grammar

   55 Comparator: tINF
   56           | tSUP
   57           | tEQEQ


Grammar

    0 $accept: Program $end

    1 Program: Functions

    2 Functions: Function
    3          | Function Functions

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF

    5 FunCall: FunName tPO CallArgs tPF tPV

    6 DecArgs: Type tID NextDecArg
    7        | %empty

    8 NextDecArg: tV DecArgs
    9           | %empty

   10 CallArgs: Operand CallArgNext
   11         | %empty

   12 CallArgNext: tV CallArgs
   13            | %empty

   14 Type: tINT
   15     | tSTRING

   16 FunType: tVOID
   17        | Type

   18 FunName: tMAIN
   19        | tID

   20 Body: Instructions

   21 Instructions: Instruction Instructions
   22             | %empty

   23 Instruction: FunCall
   24            | VarDeclaration
   25            | VarAssign

   26 $@1: %empty

   27 $@2: %empty

   28 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition

   29 $@3: %empty

   30 Instruction: whileCondition tAO $@3 Body tAF

   31 VarDeclaration: Type tID tPV

   32 Operand: FunCall
   33        | Operations
   34        | tID
   35        | tNB

   36 Operations: Operand tADD Operand
   37           | Operand tSUB Operand
   38           | Operand tMUL Operand
   39           | Operand tDIV Operand

   40 VarAssign: tID tEQUAL Operand tPV

   41 $@4: %empty

   42 ifCondition: tIF ArgCondition $@4 elseCondition

   43 $@5: %empty

   44 elseCondition: tELSE tAO $@5 Body tAF
   45              | %empty

   46 whileCondition: tWHILE ArgCondition

   47 ArgCondition: tPO BoolExpression tPF

   48 BoolExpression: Comparaison
   49               | tID
   50               | tTRUE
   51               | tFALSE

   52 Comparaison: Operand tEQEQ Operand
   53            | Operand tINF Operand
   54            | Operand tSUP Operand


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tMAIN (258) 18
    tIF (259) 42
    tWHILE (260) 46
    tPRINT (261)
    tELSE (262) 44
    tAO (263) 4 28 30 44
    tAF (264) 4 28 30 44
    tPO (265) 4 5 47
    tPF (266) 4 5 47
    tV (267) 8 12
    tPV (268) 5 31 40
    tEQUAL (269) 40
    tVOID (270) 16
    tINT (271) 14
    tSTRING (272) 15
    tSUB (273) 37
    tADD (274) 36
    tMUL (275) 38
    tDIV (276) 39
    tINF (277) 53
    tSUP (278) 54
    tEQEQ (279) 52
    tTRUE (280) 50
    tFALSE (281) 51
    tNB <nb> (282) 35
    tID <string> (283) 6 19 31 34 40 49


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    Program (30)
        on left: 1
        on right: 0
    Functions (31)
        on left: 2 3
        on right: 1 3
    Function (32)
        on left: 4
        on right: 2 3
    FunCall (33)
        on left: 5
        on right: 23 32
    DecArgs (34)
        on left: 6 7
        on right: 4 8
    NextDecArg (35)
        on left: 8 9
        on right: 6
    CallArgs (36)
        on left: 10 11
        on right: 5 12
    CallArgNext (37)
        on left: 12 13
        on right: 10
    Type <nb> (38)
        on left: 14 15
        on right: 6 17 31
    FunType (39)
        on left: 16 17
        on right: 4
    FunName (40)
        on left: 18 19
        on right: 4 5
    Body (41)
        on left: 20
        on right: 4 28 30 44
    Instructions (42)
        on left: 21 22
        on right: 20 21
    Instruction (43)
        on left: 23 24 25 28 30
        on right: 21
    $@1 (44)
        on left: 26
        on right: 28
    $@2 (45)
        on left: 27
        on right: 28
    $@3 (46)
        on left: 29
        on right: 30
    VarDeclaration (47)
        on left: 31
        on right: 24
    Operand (48)
        on left: 32 33 34 35
        on right: 10 36 37 38 39 40 52 53 54
    Operations (49)
        on left: 36 37 38 39
        on right: 33
    VarAssign (50)
        on left: 40
        on right: 25
    ifCondition (51)
        on left: 42
        on right: 28
    $@4 (52)
        on left: 41
        on right: 42
    elseCondition (53)
        on left: 44 45
        on right: 28 42
    $@5 (54)
        on left: 43
        on right: 44
    whileCondition (55)
        on left: 46
        on right: 30
    ArgCondition (56)
        on left: 47
        on right: 42 46
    BoolExpression (57)
        on left: 48 49 50 51
        on right: 47
    Comparaison (58)
        on left: 52 53 54
        on right: 48


State 0

    0 $accept: . Program $end

    tVOID    shift, and go to state 1
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    Program    go to state 4
    Functions  go to state 5
    Function   go to state 6
    Type       go to state 7
    FunType    go to state 8


State 1

   16 FunType: tVOID .

    $default  reduce using rule 16 (FunType)


State 2

   14 Type: tINT .

    $default  reduce using rule 14 (Type)


State 3

   15 Type: tSTRING .

    $default  reduce using rule 15 (Type)


State 4

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 5

    1 Program: Functions .

    $default  reduce using rule 1 (Program)


State 6

    2 Functions: Function .
    3          | Function . Functions

    tVOID    shift, and go to state 1
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    $default  reduce using rule 2 (Functions)

    Functions  go to state 10
    Function   go to state 6
    Type       go to state 7
    FunType    go to state 8


State 7

   17 FunType: Type .

    $default  reduce using rule 17 (FunType)


State 8

    4 Function: FunType . FunName tPO DecArgs tPF tAO Body tAF

    tMAIN  shift, and go to state 11
    tID    shift, and go to state 12

    FunName  go to state 13


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    3 Functions: Function Functions .

    $default  reduce using rule 3 (Functions)


State 11

   18 FunName: tMAIN .

    $default  reduce using rule 18 (FunName)


State 12

   19 FunName: tID .

    $default  reduce using rule 19 (FunName)


State 13

    4 Function: FunType FunName . tPO DecArgs tPF tAO Body tAF

    tPO  shift, and go to state 14


State 14

    4 Function: FunType FunName tPO . DecArgs tPF tAO Body tAF

    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 15
    Type     go to state 16


State 15

    4 Function: FunType FunName tPO DecArgs . tPF tAO Body tAF

    tPF  shift, and go to state 17


State 16

    6 DecArgs: Type . tID NextDecArg

    tID  shift, and go to state 18


State 17

    4 Function: FunType FunName tPO DecArgs tPF . tAO Body tAF

    tAO  shift, and go to state 19


State 18

    6 DecArgs: Type tID . NextDecArg

    tV  shift, and go to state 20

    $default  reduce using rule 9 (NextDecArg)

    NextDecArg  go to state 21


State 19

    4 Function: FunType FunName tPO DecArgs tPF tAO . Body tAF

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall         go to state 25
    Type            go to state 26
    FunName         go to state 27
    Body            go to state 28
    Instructions    go to state 29
    Instruction     go to state 30
    VarDeclaration  go to state 31
    VarAssign       go to state 32
    ifCondition     go to state 33
    whileCondition  go to state 34


State 20

    8 NextDecArg: tV . DecArgs

    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 35
    Type     go to state 16


State 21

    6 DecArgs: Type tID NextDecArg .

    $default  reduce using rule 6 (DecArgs)


State 22

   42 ifCondition: tIF . ArgCondition $@4 elseCondition

    tPO  shift, and go to state 36

    ArgCondition  go to state 37


State 23

   46 whileCondition: tWHILE . ArgCondition

    tPO  shift, and go to state 36

    ArgCondition  go to state 38


State 24

   19 FunName: tID .
   40 VarAssign: tID . tEQUAL Operand tPV

    tEQUAL  shift, and go to state 39

    $default  reduce using rule 19 (FunName)


State 25

   23 Instruction: FunCall .

    $default  reduce using rule 23 (Instruction)


State 26

   31 VarDeclaration: Type . tID tPV

    tID  shift, and go to state 40


State 27

    5 FunCall: FunName . tPO CallArgs tPF tPV

    tPO  shift, and go to state 41


State 28

    4 Function: FunType FunName tPO DecArgs tPF tAO Body . tAF

    tAF  shift, and go to state 42


State 29

   20 Body: Instructions .

    $default  reduce using rule 20 (Body)


State 30

   21 Instructions: Instruction . Instructions

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall         go to state 25
    Type            go to state 26
    FunName         go to state 27
    Instructions    go to state 43
    Instruction     go to state 30
    VarDeclaration  go to state 31
    VarAssign       go to state 32
    ifCondition     go to state 33
    whileCondition  go to state 34


State 31

   24 Instruction: VarDeclaration .

    $default  reduce using rule 24 (Instruction)


State 32

   25 Instruction: VarAssign .

    $default  reduce using rule 25 (Instruction)


State 33

   28 Instruction: ifCondition . tAO $@1 Body tAF $@2 elseCondition

    tAO  shift, and go to state 44


State 34

   30 Instruction: whileCondition . tAO $@3 Body tAF

    tAO  shift, and go to state 45


State 35

    8 NextDecArg: tV DecArgs .

    $default  reduce using rule 8 (NextDecArg)


State 36

   47 ArgCondition: tPO . BoolExpression tPF

    tMAIN   shift, and go to state 11
    tTRUE   shift, and go to state 46
    tFALSE  shift, and go to state 47
    tNB     shift, and go to state 48
    tID     shift, and go to state 49

    FunCall         go to state 50
    FunName         go to state 27
    Operand         go to state 51
    Operations      go to state 52
    BoolExpression  go to state 53
    Comparaison     go to state 54


State 37

   42 ifCondition: tIF ArgCondition . $@4 elseCondition

    $default  reduce using rule 41 ($@4)

    $@4  go to state 55


State 38

   46 whileCondition: tWHILE ArgCondition .

    $default  reduce using rule 46 (whileCondition)


State 39

   40 VarAssign: tID tEQUAL . Operand tPV

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 57
    Operations  go to state 52


State 40

   31 VarDeclaration: Type tID . tPV

    tPV  shift, and go to state 58


State 41

    5 FunCall: FunName tPO . CallArgs tPF tPV

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 50
    CallArgs    go to state 59
    FunName     go to state 27
    Operand     go to state 60
    Operations  go to state 52


State 42

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF .

    $default  reduce using rule 4 (Function)


State 43

   21 Instructions: Instruction Instructions .

    $default  reduce using rule 21 (Instructions)


State 44

   28 Instruction: ifCondition tAO . $@1 Body tAF $@2 elseCondition

    $default  reduce using rule 26 ($@1)

    $@1  go to state 61


State 45

   30 Instruction: whileCondition tAO . $@3 Body tAF

    $default  reduce using rule 29 ($@3)

    $@3  go to state 62


State 46

   50 BoolExpression: tTRUE .

    $default  reduce using rule 50 (BoolExpression)


State 47

   51 BoolExpression: tFALSE .

    $default  reduce using rule 51 (BoolExpression)


State 48

   35 Operand: tNB .

    $default  reduce using rule 35 (Operand)


State 49

   19 FunName: tID .
   34 Operand: tID .
   49 BoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 49 (BoolExpression)
    $default  reduce using rule 34 (Operand)


State 50

   32 Operand: FunCall .

    $default  reduce using rule 32 (Operand)


State 51

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand
   52 Comparaison: Operand . tEQEQ Operand
   53            | Operand . tINF Operand
   54            | Operand . tSUP Operand

    tSUB   shift, and go to state 63
    tADD   shift, and go to state 64
    tMUL   shift, and go to state 65
    tDIV   shift, and go to state 66
    tINF   shift, and go to state 67
    tSUP   shift, and go to state 68
    tEQEQ  shift, and go to state 69


State 52

   33 Operand: Operations .

    $default  reduce using rule 33 (Operand)


State 53

   47 ArgCondition: tPO BoolExpression . tPF

    tPF  shift, and go to state 70


State 54

   48 BoolExpression: Comparaison .

    $default  reduce using rule 48 (BoolExpression)


State 55

   42 ifCondition: tIF ArgCondition $@4 . elseCondition

    tELSE  shift, and go to state 71

    $default  reduce using rule 45 (elseCondition)

    elseCondition  go to state 72


State 56

   19 FunName: tID .
   34 Operand: tID .

    tPO       reduce using rule 19 (FunName)
    $default  reduce using rule 34 (Operand)


State 57

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand
   40 VarAssign: tID tEQUAL Operand . tPV

    tPV   shift, and go to state 73
    tSUB  shift, and go to state 63
    tADD  shift, and go to state 64
    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66


State 58

   31 VarDeclaration: Type tID tPV .

    $default  reduce using rule 31 (VarDeclaration)


State 59

    5 FunCall: FunName tPO CallArgs . tPF tPV

    tPF  shift, and go to state 74


State 60

   10 CallArgs: Operand . CallArgNext
   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand

    tV    shift, and go to state 75
    tSUB  shift, and go to state 63
    tADD  shift, and go to state 64
    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66

    $default  reduce using rule 13 (CallArgNext)

    CallArgNext  go to state 76


State 61

   28 Instruction: ifCondition tAO $@1 . Body tAF $@2 elseCondition

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall         go to state 25
    Type            go to state 26
    FunName         go to state 27
    Body            go to state 77
    Instructions    go to state 29
    Instruction     go to state 30
    VarDeclaration  go to state 31
    VarAssign       go to state 32
    ifCondition     go to state 33
    whileCondition  go to state 34


State 62

   30 Instruction: whileCondition tAO $@3 . Body tAF

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall         go to state 25
    Type            go to state 26
    FunName         go to state 27
    Body            go to state 78
    Instructions    go to state 29
    Instruction     go to state 30
    VarDeclaration  go to state 31
    VarAssign       go to state 32
    ifCondition     go to state 33
    whileCondition  go to state 34


State 63

   37 Operations: Operand tSUB . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 79
    Operations  go to state 52


State 64

   36 Operations: Operand tADD . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 80
    Operations  go to state 52


State 65

   38 Operations: Operand tMUL . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 81
    Operations  go to state 52


State 66

   39 Operations: Operand tDIV . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 82
    Operations  go to state 52


State 67

   53 Comparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 83
    Operations  go to state 52


State 68

   54 Comparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 84
    Operations  go to state 52


State 69

   52 Comparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 85
    Operations  go to state 52


State 70

   47 ArgCondition: tPO BoolExpression tPF .

    $default  reduce using rule 47 (ArgCondition)


State 71

   44 elseCondition: tELSE . tAO $@5 Body tAF

    tAO  shift, and go to state 86


State 72

   42 ifCondition: tIF ArgCondition $@4 elseCondition .

    $default  reduce using rule 42 (ifCondition)


State 73

   40 VarAssign: tID tEQUAL Operand tPV .

    $default  reduce using rule 40 (VarAssign)


State 74

    5 FunCall: FunName tPO CallArgs tPF . tPV

    tPV  shift, and go to state 87


State 75

   12 CallArgNext: tV . CallArgs

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 56

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 50
    CallArgs    go to state 88
    FunName     go to state 27
    Operand     go to state 60
    Operations  go to state 52


State 76

   10 CallArgs: Operand CallArgNext .

    $default  reduce using rule 10 (CallArgs)


State 77

   28 Instruction: ifCondition tAO $@1 Body . tAF $@2 elseCondition

    tAF  shift, and go to state 89


State 78

   30 Instruction: whileCondition tAO $@3 Body . tAF

    tAF  shift, and go to state 90


State 79

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   37           | Operand tSUB Operand .
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand

    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66

    $default  reduce using rule 37 (Operations)


State 80

   36 Operations: Operand . tADD Operand
   36           | Operand tADD Operand .
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand

    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66

    $default  reduce using rule 36 (Operations)


State 81

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   38           | Operand tMUL Operand .
   39           | Operand . tDIV Operand

    $default  reduce using rule 38 (Operations)


State 82

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand
   39           | Operand tDIV Operand .

    $default  reduce using rule 39 (Operations)


State 83

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand
   53 Comparaison: Operand tINF Operand .

    tSUB  shift, and go to state 63
    tADD  shift, and go to state 64
    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66

    $default  reduce using rule 53 (Comparaison)


State 84

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand
   54 Comparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 63
    tADD  shift, and go to state 64
    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66

    $default  reduce using rule 54 (Comparaison)


State 85

   36 Operations: Operand . tADD Operand
   37           | Operand . tSUB Operand
   38           | Operand . tMUL Operand
   39           | Operand . tDIV Operand
   52 Comparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 63
    tADD  shift, and go to state 64
    tMUL  shift, and go to state 65
    tDIV  shift, and go to state 66

    $default  reduce using rule 52 (Comparaison)


State 86

   44 elseCondition: tELSE tAO . $@5 Body tAF

    $default  reduce using rule 43 ($@5)

    $@5  go to state 91


State 87

    5 FunCall: FunName tPO CallArgs tPF tPV .

    $default  reduce using rule 5 (FunCall)


State 88

   12 CallArgNext: tV CallArgs .

    $default  reduce using rule 12 (CallArgNext)


State 89

   28 Instruction: ifCondition tAO $@1 Body tAF . $@2 elseCondition

    $default  reduce using rule 27 ($@2)

    $@2  go to state 92


State 90

   30 Instruction: whileCondition tAO $@3 Body tAF .

    $default  reduce using rule 30 (Instruction)


State 91

   44 elseCondition: tELSE tAO $@5 . Body tAF

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall         go to state 25
    Type            go to state 26
    FunName         go to state 27
    Body            go to state 93
    Instructions    go to state 29
    Instruction     go to state 30
    VarDeclaration  go to state 31
    VarAssign       go to state 32
    ifCondition     go to state 33
    whileCondition  go to state 34


State 92

   28 Instruction: ifCondition tAO $@1 Body tAF $@2 . elseCondition

    tELSE  shift, and go to state 71

    $default  reduce using rule 45 (elseCondition)

    elseCondition  go to state 94


State 93

   44 elseCondition: tELSE tAO $@5 Body . tAF

    tAF  shift, and go to state 95


State 94

   28 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition .

    $default  reduce using rule 28 (Instruction)


State 95

   44 elseCondition: tELSE tAO $@5 Body tAF .

    $default  reduce using rule 44 (elseCondition)
