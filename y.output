Nonterminals useless in grammar

    Comparator


Terminals unused in grammar

    tPRINT
    tSTRING


Rules useless in grammar

   70 Comparator: tINF
   71           | tSUP
   72           | tEQEQ


Rules useless in parser due to conflicts

   34 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV


State 110 conflicts: 7 reduce/reduce


Grammar

    0 $accept: Program $end

    1 Program: Functions

    2 Functions: Function
    3          | Function Functions

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF

    5 FunCall: FunName tPO CallArgs tPF tPV

    6 DecArgs: Type tID NextDecArg
    7        | %empty

    8 NextDecArg: tV DecArgs
    9           | %empty

   10 CallArgs: Operand CallArgNext
   11         | %empty

   12 CallArgNext: tV CallArgs
   13            | %empty

   14 Type: tCONST
   15     | %empty

   16 FunType: tVOID
   17        | tINT

   18 FunName: tMAIN
   19        | tID

   20 Body: Instructions

   21 Instructions: Instruction Instructions
   22             | %empty

   23 Instruction: FunCall
   24            | ConstDeclarationAndAssign
   25            | VarDeclarationAndAssign
   26            | VarDeclaration
   27            | VarAssign

   28 $@1: %empty

   29 $@2: %empty

   30 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition

   31 $@3: %empty

   32 Instruction: whileCondition tAO $@3 Body tAF

   33 ConstDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV

   34 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV
   35                        | Type tINT tID tEQUAL tID tPV

   36 $@4: %empty

   37 VarDeclaration: Type tINT tID $@4 NextVar

   38 $@5: %empty

   39 NextVar: Type tV tID $@5 NextVar
   40        | tPV

   41 Operand: FunCall
   42        | Operations
   43        | tID
   44        | tNB

   45 Operations: Operand tADD Operand
   46           | Operand tSUB Operand
   47           | Operand tMUL Operand
   48           | Operand tDIV Operand

   49 VarAssign: tID tEQUAL Operand tPV

   50 $@6: %empty

   51 ifCondition: tIF tPO ifBoolExpression tPF $@6 elseCondition

   52 $@7: %empty

   53 elseCondition: tELSE tAO $@7 Body tAF
   54              | %empty

   55 whileCondition: tWHILE tPO whileBoolExpression tPF

   56 ifBoolExpression: ifComparaison
   57                 | tID
   58                 | tTRUE
   59                 | tFALSE

   60 ifComparaison: Operand tEQEQ Operand
   61              | Operand tINF Operand
   62              | Operand tSUP Operand

   63 whileBoolExpression: whileComparaison
   64                    | tID
   65                    | tTRUE
   66                    | tFALSE

   67 whileComparaison: Operand tEQEQ Operand
   68                 | Operand tINF Operand
   69                 | Operand tSUP Operand


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tMAIN (258) 18
    tIF (259) 51
    tWHILE (260) 55
    tPRINT (261)
    tELSE (262) 53
    tAO (263) 4 30 32 53
    tAF (264) 4 30 32 53
    tPO (265) 4 5 51 55
    tPF (266) 4 5 51 55
    tV (267) 8 12 39
    tPV (268) 5 33 34 35 40 49
    tEQUAL (269) 33 34 35 49
    tVOID (270) 16
    tINT (271) 17 33 34 35 37
    tSTRING (272)
    tSUB (273) 46
    tADD (274) 45
    tMUL (275) 47
    tDIV (276) 48
    tINF (277) 61 68
    tSUP (278) 62 69
    tEQEQ (279) 60 67
    tTRUE (280) 58 65
    tFALSE (281) 59 66
    tCONST (282) 14
    tNB <nb> (283) 33 34 44
    tID <string> (284) 6 19 33 34 35 37 39 43 49 57 64


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    Program (31)
        on left: 1
        on right: 0
    Functions (32)
        on left: 2 3
        on right: 1 3
    Function (33)
        on left: 4
        on right: 2 3
    FunCall (34)
        on left: 5
        on right: 23 41
    DecArgs (35)
        on left: 6 7
        on right: 4 8
    NextDecArg (36)
        on left: 8 9
        on right: 6
    CallArgs (37)
        on left: 10 11
        on right: 5 12
    CallArgNext (38)
        on left: 12 13
        on right: 10
    Type <nb> (39)
        on left: 14 15
        on right: 6 33 34 35 37 39
    FunType (40)
        on left: 16 17
        on right: 4
    FunName (41)
        on left: 18 19
        on right: 4 5
    Body (42)
        on left: 20
        on right: 4 30 32 53
    Instructions (43)
        on left: 21 22
        on right: 20 21
    Instruction (44)
        on left: 23 24 25 26 27 30 32
        on right: 21
    $@1 (45)
        on left: 28
        on right: 30
    $@2 (46)
        on left: 29
        on right: 30
    $@3 (47)
        on left: 31
        on right: 32
    ConstDeclarationAndAssign (48)
        on left: 33
        on right: 24
    VarDeclarationAndAssign (49)
        on left: 34 35
        on right: 25
    VarDeclaration (50)
        on left: 37
        on right: 26
    $@4 (51)
        on left: 36
        on right: 37
    NextVar (52)
        on left: 39 40
        on right: 37 39
    $@5 (53)
        on left: 38
        on right: 39
    Operand (54)
        on left: 41 42 43 44
        on right: 10 45 46 47 48 49 60 61 62 67 68 69
    Operations (55)
        on left: 45 46 47 48
        on right: 42
    VarAssign (56)
        on left: 49
        on right: 27
    ifCondition (57)
        on left: 51
        on right: 30
    $@6 (58)
        on left: 50
        on right: 51
    elseCondition (59)
        on left: 53 54
        on right: 30 51
    $@7 (60)
        on left: 52
        on right: 53
    whileCondition (61)
        on left: 55
        on right: 32
    ifBoolExpression (62)
        on left: 56 57 58 59
        on right: 51
    ifComparaison (63)
        on left: 60 61 62
        on right: 56
    whileBoolExpression (64)
        on left: 63 64 65 66
        on right: 55
    whileComparaison (65)
        on left: 67 68 69
        on right: 63


State 0

    0 $accept: . Program $end

    tVOID  shift, and go to state 1
    tINT   shift, and go to state 2

    Program    go to state 3
    Functions  go to state 4
    Function   go to state 5
    FunType    go to state 6


State 1

   16 FunType: tVOID .

    $default  reduce using rule 16 (FunType)


State 2

   17 FunType: tINT .

    $default  reduce using rule 17 (FunType)


State 3

    0 $accept: Program . $end

    $end  shift, and go to state 7


State 4

    1 Program: Functions .

    $default  reduce using rule 1 (Program)


State 5

    2 Functions: Function .
    3          | Function . Functions

    tVOID  shift, and go to state 1
    tINT   shift, and go to state 2

    $default  reduce using rule 2 (Functions)

    Functions  go to state 8
    Function   go to state 5
    FunType    go to state 6


State 6

    4 Function: FunType . FunName tPO DecArgs tPF tAO Body tAF

    tMAIN  shift, and go to state 9
    tID    shift, and go to state 10

    FunName  go to state 11


State 7

    0 $accept: Program $end .

    $default  accept


State 8

    3 Functions: Function Functions .

    $default  reduce using rule 3 (Functions)


State 9

   18 FunName: tMAIN .

    $default  reduce using rule 18 (FunName)


State 10

   19 FunName: tID .

    $default  reduce using rule 19 (FunName)


State 11

    4 Function: FunType FunName . tPO DecArgs tPF tAO Body tAF

    tPO  shift, and go to state 12


State 12

    4 Function: FunType FunName tPO . DecArgs tPF tAO Body tAF

    tCONST  shift, and go to state 13

    tID       reduce using rule 15 (Type)
    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 14
    Type     go to state 15


State 13

   14 Type: tCONST .

    $default  reduce using rule 14 (Type)


State 14

    4 Function: FunType FunName tPO DecArgs . tPF tAO Body tAF

    tPF  shift, and go to state 16


State 15

    6 DecArgs: Type . tID NextDecArg

    tID  shift, and go to state 17


State 16

    4 Function: FunType FunName tPO DecArgs tPF . tAO Body tAF

    tAO  shift, and go to state 18


State 17

    6 DecArgs: Type tID . NextDecArg

    tV  shift, and go to state 19

    $default  reduce using rule 9 (NextDecArg)

    NextDecArg  go to state 20


State 18

    4 Function: FunType FunName tPO DecArgs tPF tAO . Body tAF

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tCONST  shift, and go to state 13
    tID     shift, and go to state 23

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 24
    Type                       go to state 25
    FunName                    go to state 26
    Body                       go to state 27
    Instructions               go to state 28
    Instruction                go to state 29
    ConstDeclarationAndAssign  go to state 30
    VarDeclarationAndAssign    go to state 31
    VarDeclaration             go to state 32
    VarAssign                  go to state 33
    ifCondition                go to state 34
    whileCondition             go to state 35


State 19

    8 NextDecArg: tV . DecArgs

    tCONST  shift, and go to state 13

    tID       reduce using rule 15 (Type)
    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 36
    Type     go to state 15


State 20

    6 DecArgs: Type tID NextDecArg .

    $default  reduce using rule 6 (DecArgs)


State 21

   51 ifCondition: tIF . tPO ifBoolExpression tPF $@6 elseCondition

    tPO  shift, and go to state 37


State 22

   55 whileCondition: tWHILE . tPO whileBoolExpression tPF

    tPO  shift, and go to state 38


State 23

   19 FunName: tID .
   49 VarAssign: tID . tEQUAL Operand tPV

    tEQUAL  shift, and go to state 39

    $default  reduce using rule 19 (FunName)


State 24

   23 Instruction: FunCall .

    $default  reduce using rule 23 (Instruction)


State 25

   33 ConstDeclarationAndAssign: Type . tINT tID tEQUAL tNB tPV
   34 VarDeclarationAndAssign: Type . tINT tID tEQUAL tNB tPV
   35                        | Type . tINT tID tEQUAL tID tPV
   37 VarDeclaration: Type . tINT tID $@4 NextVar

    tINT  shift, and go to state 40


State 26

    5 FunCall: FunName . tPO CallArgs tPF tPV

    tPO  shift, and go to state 41


State 27

    4 Function: FunType FunName tPO DecArgs tPF tAO Body . tAF

    tAF  shift, and go to state 42


State 28

   20 Body: Instructions .

    $default  reduce using rule 20 (Body)


State 29

   21 Instructions: Instruction . Instructions

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tCONST  shift, and go to state 13
    tID     shift, and go to state 23

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 24
    Type                       go to state 25
    FunName                    go to state 26
    Instructions               go to state 43
    Instruction                go to state 29
    ConstDeclarationAndAssign  go to state 30
    VarDeclarationAndAssign    go to state 31
    VarDeclaration             go to state 32
    VarAssign                  go to state 33
    ifCondition                go to state 34
    whileCondition             go to state 35


State 30

   24 Instruction: ConstDeclarationAndAssign .

    $default  reduce using rule 24 (Instruction)


State 31

   25 Instruction: VarDeclarationAndAssign .

    $default  reduce using rule 25 (Instruction)


State 32

   26 Instruction: VarDeclaration .

    $default  reduce using rule 26 (Instruction)


State 33

   27 Instruction: VarAssign .

    $default  reduce using rule 27 (Instruction)


State 34

   30 Instruction: ifCondition . tAO $@1 Body tAF $@2 elseCondition

    tAO  shift, and go to state 44


State 35

   32 Instruction: whileCondition . tAO $@3 Body tAF

    tAO  shift, and go to state 45


State 36

    8 NextDecArg: tV DecArgs .

    $default  reduce using rule 8 (NextDecArg)


State 37

   51 ifCondition: tIF tPO . ifBoolExpression tPF $@6 elseCondition

    tMAIN   shift, and go to state 9
    tTRUE   shift, and go to state 46
    tFALSE  shift, and go to state 47
    tNB     shift, and go to state 48
    tID     shift, and go to state 49

    FunCall           go to state 50
    FunName           go to state 26
    Operand           go to state 51
    Operations        go to state 52
    ifBoolExpression  go to state 53
    ifComparaison     go to state 54


State 38

   55 whileCondition: tWHILE tPO . whileBoolExpression tPF

    tMAIN   shift, and go to state 9
    tTRUE   shift, and go to state 55
    tFALSE  shift, and go to state 56
    tNB     shift, and go to state 48
    tID     shift, and go to state 57

    FunCall              go to state 50
    FunName              go to state 26
    Operand              go to state 58
    Operations           go to state 52
    whileBoolExpression  go to state 59
    whileComparaison     go to state 60


State 39

   49 VarAssign: tID tEQUAL . Operand tPV

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 62
    Operations  go to state 52


State 40

   33 ConstDeclarationAndAssign: Type tINT . tID tEQUAL tNB tPV
   34 VarDeclarationAndAssign: Type tINT . tID tEQUAL tNB tPV
   35                        | Type tINT . tID tEQUAL tID tPV
   37 VarDeclaration: Type tINT . tID $@4 NextVar

    tID  shift, and go to state 63


State 41

    5 FunCall: FunName tPO . CallArgs tPF tPV

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 50
    CallArgs    go to state 64
    FunName     go to state 26
    Operand     go to state 65
    Operations  go to state 52


State 42

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF .

    $default  reduce using rule 4 (Function)


State 43

   21 Instructions: Instruction Instructions .

    $default  reduce using rule 21 (Instructions)


State 44

   30 Instruction: ifCondition tAO . $@1 Body tAF $@2 elseCondition

    $default  reduce using rule 28 ($@1)

    $@1  go to state 66


State 45

   32 Instruction: whileCondition tAO . $@3 Body tAF

    $default  reduce using rule 31 ($@3)

    $@3  go to state 67


State 46

   58 ifBoolExpression: tTRUE .

    $default  reduce using rule 58 (ifBoolExpression)


State 47

   59 ifBoolExpression: tFALSE .

    $default  reduce using rule 59 (ifBoolExpression)


State 48

   44 Operand: tNB .

    $default  reduce using rule 44 (Operand)


State 49

   19 FunName: tID .
   43 Operand: tID .
   57 ifBoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 57 (ifBoolExpression)
    $default  reduce using rule 43 (Operand)


State 50

   41 Operand: FunCall .

    $default  reduce using rule 41 (Operand)


State 51

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   60 ifComparaison: Operand . tEQEQ Operand
   61              | Operand . tINF Operand
   62              | Operand . tSUP Operand

    tSUB   shift, and go to state 68
    tADD   shift, and go to state 69
    tMUL   shift, and go to state 70
    tDIV   shift, and go to state 71
    tINF   shift, and go to state 72
    tSUP   shift, and go to state 73
    tEQEQ  shift, and go to state 74


State 52

   42 Operand: Operations .

    $default  reduce using rule 42 (Operand)


State 53

   51 ifCondition: tIF tPO ifBoolExpression . tPF $@6 elseCondition

    tPF  shift, and go to state 75


State 54

   56 ifBoolExpression: ifComparaison .

    $default  reduce using rule 56 (ifBoolExpression)


State 55

   65 whileBoolExpression: tTRUE .

    $default  reduce using rule 65 (whileBoolExpression)


State 56

   66 whileBoolExpression: tFALSE .

    $default  reduce using rule 66 (whileBoolExpression)


State 57

   19 FunName: tID .
   43 Operand: tID .
   64 whileBoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 64 (whileBoolExpression)
    $default  reduce using rule 43 (Operand)


State 58

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   67 whileComparaison: Operand . tEQEQ Operand
   68                 | Operand . tINF Operand
   69                 | Operand . tSUP Operand

    tSUB   shift, and go to state 68
    tADD   shift, and go to state 69
    tMUL   shift, and go to state 70
    tDIV   shift, and go to state 71
    tINF   shift, and go to state 76
    tSUP   shift, and go to state 77
    tEQEQ  shift, and go to state 78


State 59

   55 whileCondition: tWHILE tPO whileBoolExpression . tPF

    tPF  shift, and go to state 79


State 60

   63 whileBoolExpression: whileComparaison .

    $default  reduce using rule 63 (whileBoolExpression)


State 61

   19 FunName: tID .
   43 Operand: tID .

    tPO       reduce using rule 19 (FunName)
    $default  reduce using rule 43 (Operand)


State 62

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   49 VarAssign: tID tEQUAL Operand . tPV

    tPV   shift, and go to state 80
    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71


State 63

   33 ConstDeclarationAndAssign: Type tINT tID . tEQUAL tNB tPV
   34 VarDeclarationAndAssign: Type tINT tID . tEQUAL tNB tPV
   35                        | Type tINT tID . tEQUAL tID tPV
   37 VarDeclaration: Type tINT tID . $@4 NextVar

    tEQUAL  shift, and go to state 81

    $default  reduce using rule 36 ($@4)

    $@4  go to state 82


State 64

    5 FunCall: FunName tPO CallArgs . tPF tPV

    tPF  shift, and go to state 83


State 65

   10 CallArgs: Operand . CallArgNext
   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand

    tV    shift, and go to state 84
    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 13 (CallArgNext)

    CallArgNext  go to state 85


State 66

   30 Instruction: ifCondition tAO $@1 . Body tAF $@2 elseCondition

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tCONST  shift, and go to state 13
    tID     shift, and go to state 23

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 24
    Type                       go to state 25
    FunName                    go to state 26
    Body                       go to state 86
    Instructions               go to state 28
    Instruction                go to state 29
    ConstDeclarationAndAssign  go to state 30
    VarDeclarationAndAssign    go to state 31
    VarDeclaration             go to state 32
    VarAssign                  go to state 33
    ifCondition                go to state 34
    whileCondition             go to state 35


State 67

   32 Instruction: whileCondition tAO $@3 . Body tAF

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tCONST  shift, and go to state 13
    tID     shift, and go to state 23

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 24
    Type                       go to state 25
    FunName                    go to state 26
    Body                       go to state 87
    Instructions               go to state 28
    Instruction                go to state 29
    ConstDeclarationAndAssign  go to state 30
    VarDeclarationAndAssign    go to state 31
    VarDeclaration             go to state 32
    VarAssign                  go to state 33
    ifCondition                go to state 34
    whileCondition             go to state 35


State 68

   46 Operations: Operand tSUB . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 88
    Operations  go to state 52


State 69

   45 Operations: Operand tADD . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 89
    Operations  go to state 52


State 70

   47 Operations: Operand tMUL . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 90
    Operations  go to state 52


State 71

   48 Operations: Operand tDIV . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 91
    Operations  go to state 52


State 72

   61 ifComparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 92
    Operations  go to state 52


State 73

   62 ifComparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 93
    Operations  go to state 52


State 74

   60 ifComparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 94
    Operations  go to state 52


State 75

   51 ifCondition: tIF tPO ifBoolExpression tPF . $@6 elseCondition

    $default  reduce using rule 50 ($@6)

    $@6  go to state 95


State 76

   68 whileComparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 96
    Operations  go to state 52


State 77

   69 whileComparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 97
    Operations  go to state 52


State 78

   67 whileComparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 26
    Operand     go to state 98
    Operations  go to state 52


State 79

   55 whileCondition: tWHILE tPO whileBoolExpression tPF .

    $default  reduce using rule 55 (whileCondition)


State 80

   49 VarAssign: tID tEQUAL Operand tPV .

    $default  reduce using rule 49 (VarAssign)


State 81

   33 ConstDeclarationAndAssign: Type tINT tID tEQUAL . tNB tPV
   34 VarDeclarationAndAssign: Type tINT tID tEQUAL . tNB tPV
   35                        | Type tINT tID tEQUAL . tID tPV

    tNB  shift, and go to state 99
    tID  shift, and go to state 100


State 82

   37 VarDeclaration: Type tINT tID $@4 . NextVar

    tPV     shift, and go to state 101
    tCONST  shift, and go to state 13

    $default  reduce using rule 15 (Type)

    Type     go to state 102
    NextVar  go to state 103


State 83

    5 FunCall: FunName tPO CallArgs tPF . tPV

    tPV  shift, and go to state 104


State 84

   12 CallArgNext: tV . CallArgs

    tMAIN  shift, and go to state 9
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 50
    CallArgs    go to state 105
    FunName     go to state 26
    Operand     go to state 65
    Operations  go to state 52


State 85

   10 CallArgs: Operand CallArgNext .

    $default  reduce using rule 10 (CallArgs)


State 86

   30 Instruction: ifCondition tAO $@1 Body . tAF $@2 elseCondition

    tAF  shift, and go to state 106


State 87

   32 Instruction: whileCondition tAO $@3 Body . tAF

    tAF  shift, and go to state 107


State 88

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   46           | Operand tSUB Operand .
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand

    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 46 (Operations)


State 89

   45 Operations: Operand . tADD Operand
   45           | Operand tADD Operand .
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand

    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 45 (Operations)


State 90

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   47           | Operand tMUL Operand .
   48           | Operand . tDIV Operand

    $default  reduce using rule 47 (Operations)


State 91

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   48           | Operand tDIV Operand .

    $default  reduce using rule 48 (Operations)


State 92

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   61 ifComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 61 (ifComparaison)


State 93

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   62 ifComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 62 (ifComparaison)


State 94

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   60 ifComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 60 (ifComparaison)


State 95

   51 ifCondition: tIF tPO ifBoolExpression tPF $@6 . elseCondition

    tELSE  shift, and go to state 108

    $default  reduce using rule 54 (elseCondition)

    elseCondition  go to state 109


State 96

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   68 whileComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 68 (whileComparaison)


State 97

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   69 whileComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 69 (whileComparaison)


State 98

   45 Operations: Operand . tADD Operand
   46           | Operand . tSUB Operand
   47           | Operand . tMUL Operand
   48           | Operand . tDIV Operand
   67 whileComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 68
    tADD  shift, and go to state 69
    tMUL  shift, and go to state 70
    tDIV  shift, and go to state 71

    $default  reduce using rule 67 (whileComparaison)


State 99

   33 ConstDeclarationAndAssign: Type tINT tID tEQUAL tNB . tPV
   34 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB . tPV

    tPV  shift, and go to state 110


State 100

   35 VarDeclarationAndAssign: Type tINT tID tEQUAL tID . tPV

    tPV  shift, and go to state 111


State 101

   40 NextVar: tPV .

    $default  reduce using rule 40 (NextVar)


State 102

   39 NextVar: Type . tV tID $@5 NextVar

    tV  shift, and go to state 112


State 103

   37 VarDeclaration: Type tINT tID $@4 NextVar .

    $default  reduce using rule 37 (VarDeclaration)


State 104

    5 FunCall: FunName tPO CallArgs tPF tPV .

    $default  reduce using rule 5 (FunCall)


State 105

   12 CallArgNext: tV CallArgs .

    $default  reduce using rule 12 (CallArgNext)


State 106

   30 Instruction: ifCondition tAO $@1 Body tAF . $@2 elseCondition

    $default  reduce using rule 29 ($@2)

    $@2  go to state 113


State 107

   32 Instruction: whileCondition tAO $@3 Body tAF .

    $default  reduce using rule 32 (Instruction)


State 108

   53 elseCondition: tELSE . tAO $@7 Body tAF

    tAO  shift, and go to state 114


State 109

   51 ifCondition: tIF tPO ifBoolExpression tPF $@6 elseCondition .

    $default  reduce using rule 51 (ifCondition)


State 110

   33 ConstDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV .
   34 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV .

    tMAIN     reduce using rule 33 (ConstDeclarationAndAssign)
    tMAIN     [reduce using rule 34 (VarDeclarationAndAssign)]
    tIF       reduce using rule 33 (ConstDeclarationAndAssign)
    tIF       [reduce using rule 34 (VarDeclarationAndAssign)]
    tWHILE    reduce using rule 33 (ConstDeclarationAndAssign)
    tWHILE    [reduce using rule 34 (VarDeclarationAndAssign)]
    tAF       reduce using rule 33 (ConstDeclarationAndAssign)
    tAF       [reduce using rule 34 (VarDeclarationAndAssign)]
    tINT      reduce using rule 33 (ConstDeclarationAndAssign)
    tINT      [reduce using rule 34 (VarDeclarationAndAssign)]
    tCONST    reduce using rule 33 (ConstDeclarationAndAssign)
    tCONST    [reduce using rule 34 (VarDeclarationAndAssign)]
    tID       reduce using rule 33 (ConstDeclarationAndAssign)
    tID       [reduce using rule 34 (VarDeclarationAndAssign)]
    $default  reduce using rule 33 (ConstDeclarationAndAssign)


State 111

   35 VarDeclarationAndAssign: Type tINT tID tEQUAL tID tPV .

    $default  reduce using rule 35 (VarDeclarationAndAssign)


State 112

   39 NextVar: Type tV . tID $@5 NextVar

    tID  shift, and go to state 115


State 113

   30 Instruction: ifCondition tAO $@1 Body tAF $@2 . elseCondition

    tELSE  shift, and go to state 108

    $default  reduce using rule 54 (elseCondition)

    elseCondition  go to state 116


State 114

   53 elseCondition: tELSE tAO . $@7 Body tAF

    $default  reduce using rule 52 ($@7)

    $@7  go to state 117


State 115

   39 NextVar: Type tV tID . $@5 NextVar

    $default  reduce using rule 38 ($@5)

    $@5  go to state 118


State 116

   30 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition .

    $default  reduce using rule 30 (Instruction)


State 117

   53 elseCondition: tELSE tAO $@7 . Body tAF

    tMAIN   shift, and go to state 9
    tIF     shift, and go to state 21
    tWHILE  shift, and go to state 22
    tCONST  shift, and go to state 13
    tID     shift, and go to state 23

    tAF       reduce using rule 22 (Instructions)
    $default  reduce using rule 15 (Type)

    FunCall                    go to state 24
    Type                       go to state 25
    FunName                    go to state 26
    Body                       go to state 119
    Instructions               go to state 28
    Instruction                go to state 29
    ConstDeclarationAndAssign  go to state 30
    VarDeclarationAndAssign    go to state 31
    VarDeclaration             go to state 32
    VarAssign                  go to state 33
    ifCondition                go to state 34
    whileCondition             go to state 35


State 118

   39 NextVar: Type tV tID $@5 . NextVar

    tPV     shift, and go to state 101
    tCONST  shift, and go to state 13

    $default  reduce using rule 15 (Type)

    Type     go to state 102
    NextVar  go to state 120


State 119

   53 elseCondition: tELSE tAO $@7 Body . tAF

    tAF  shift, and go to state 121


State 120

   39 NextVar: Type tV tID $@5 NextVar .

    $default  reduce using rule 39 (NextVar)


State 121

   53 elseCondition: tELSE tAO $@7 Body tAF .

    $default  reduce using rule 53 (elseCondition)
