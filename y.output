Nonterminals useless in grammar

    Comparator


Terminals unused in grammar

    tPRINT


Rules useless in grammar

   64 Comparator: tINF
   65           | tSUP
   66           | tEQEQ


Grammar

    0 $accept: Program $end

    1 Program: Functions

    2 Functions: Function
    3          | Function Functions

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF

    5 FunCall: FunName tPO CallArgs tPF tPV

    6 DecArgs: Type tID NextDecArg
    7        | %empty

    8 NextDecArg: tV DecArgs
    9           | %empty

   10 CallArgs: Operand CallArgNext
   11         | %empty

   12 CallArgNext: tV CallArgs
   13            | %empty

   14 Type: tINT
   15     | tSTRING

   16 FunType: tVOID
   17        | Type

   18 FunName: tMAIN
   19        | tID

   20 Body: Instructions

   21 Instructions: Instruction Instructions
   22             | %empty

   23 Instruction: FunCall
   24            | VarDeclarationAndAssign
   25            | VarDeclaration
   26            | VarAssign

   27 $@1: %empty

   28 $@2: %empty

   29 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition

   30 $@3: %empty

   31 Instruction: whileCondition tAO $@3 Body tAF

   32 VarDeclarationAndAssign: Type tID tEQUAL tNB tPV
   33                        | Type tID tEQUAL tID tPV

   34 VarDeclaration: Type tID tPV

   35 Operand: FunCall
   36        | Operations
   37        | tID
   38        | tNB

   39 Operations: Operand tADD Operand
   40           | Operand tSUB Operand
   41           | Operand tMUL Operand
   42           | Operand tDIV Operand

   43 VarAssign: tID tEQUAL Operand tPV

   44 $@4: %empty

   45 ifCondition: tIF tPO ifBoolExpression tPF $@4 elseCondition

   46 $@5: %empty

   47 elseCondition: tELSE tAO $@5 Body tAF
   48              | %empty

   49 whileCondition: tWHILE tPO whileBoolExpression tPF

   50 ifBoolExpression: ifComparaison
   51                 | tID
   52                 | tTRUE
   53                 | tFALSE

   54 ifComparaison: Operand tEQEQ Operand
   55              | Operand tINF Operand
   56              | Operand tSUP Operand

   57 whileBoolExpression: whileComparaison
   58                    | tID
   59                    | tTRUE
   60                    | tFALSE

   61 whileComparaison: Operand tEQEQ Operand
   62                 | Operand tINF Operand
   63                 | Operand tSUP Operand


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tMAIN (258) 18
    tIF (259) 45
    tWHILE (260) 49
    tPRINT (261)
    tELSE (262) 47
    tAO (263) 4 29 31 47
    tAF (264) 4 29 31 47
    tPO (265) 4 5 45 49
    tPF (266) 4 5 45 49
    tV (267) 8 12
    tPV (268) 5 32 33 34 43
    tEQUAL (269) 32 33 43
    tVOID (270) 16
    tINT (271) 14
    tSTRING (272) 15
    tSUB (273) 40
    tADD (274) 39
    tMUL (275) 41
    tDIV (276) 42
    tINF (277) 55 62
    tSUP (278) 56 63
    tEQEQ (279) 54 61
    tTRUE (280) 52 59
    tFALSE (281) 53 60
    tNB <nb> (282) 32 38
    tID <string> (283) 6 19 32 33 34 37 43 51 58


Nonterminals, with rules where they appear

    $accept (29)
        on left: 0
    Program (30)
        on left: 1
        on right: 0
    Functions (31)
        on left: 2 3
        on right: 1 3
    Function (32)
        on left: 4
        on right: 2 3
    FunCall (33)
        on left: 5
        on right: 23 35
    DecArgs (34)
        on left: 6 7
        on right: 4 8
    NextDecArg (35)
        on left: 8 9
        on right: 6
    CallArgs (36)
        on left: 10 11
        on right: 5 12
    CallArgNext (37)
        on left: 12 13
        on right: 10
    Type <nb> (38)
        on left: 14 15
        on right: 6 17 32 33 34
    FunType (39)
        on left: 16 17
        on right: 4
    FunName (40)
        on left: 18 19
        on right: 4 5
    Body (41)
        on left: 20
        on right: 4 29 31 47
    Instructions (42)
        on left: 21 22
        on right: 20 21
    Instruction (43)
        on left: 23 24 25 26 29 31
        on right: 21
    $@1 (44)
        on left: 27
        on right: 29
    $@2 (45)
        on left: 28
        on right: 29
    $@3 (46)
        on left: 30
        on right: 31
    VarDeclarationAndAssign (47)
        on left: 32 33
        on right: 24
    VarDeclaration (48)
        on left: 34
        on right: 25
    Operand (49)
        on left: 35 36 37 38
        on right: 10 39 40 41 42 43 54 55 56 61 62 63
    Operations (50)
        on left: 39 40 41 42
        on right: 36
    VarAssign (51)
        on left: 43
        on right: 26
    ifCondition (52)
        on left: 45
        on right: 29
    $@4 (53)
        on left: 44
        on right: 45
    elseCondition (54)
        on left: 47 48
        on right: 29 45
    $@5 (55)
        on left: 46
        on right: 47
    whileCondition (56)
        on left: 49
        on right: 31
    ifBoolExpression (57)
        on left: 50 51 52 53
        on right: 45
    ifComparaison (58)
        on left: 54 55 56
        on right: 50
    whileBoolExpression (59)
        on left: 57 58 59 60
        on right: 49
    whileComparaison (60)
        on left: 61 62 63
        on right: 57


State 0

    0 $accept: . Program $end

    tVOID    shift, and go to state 1
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    Program    go to state 4
    Functions  go to state 5
    Function   go to state 6
    Type       go to state 7
    FunType    go to state 8


State 1

   16 FunType: tVOID .

    $default  reduce using rule 16 (FunType)


State 2

   14 Type: tINT .

    $default  reduce using rule 14 (Type)


State 3

   15 Type: tSTRING .

    $default  reduce using rule 15 (Type)


State 4

    0 $accept: Program . $end

    $end  shift, and go to state 9


State 5

    1 Program: Functions .

    $default  reduce using rule 1 (Program)


State 6

    2 Functions: Function .
    3          | Function . Functions

    tVOID    shift, and go to state 1
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    $default  reduce using rule 2 (Functions)

    Functions  go to state 10
    Function   go to state 6
    Type       go to state 7
    FunType    go to state 8


State 7

   17 FunType: Type .

    $default  reduce using rule 17 (FunType)


State 8

    4 Function: FunType . FunName tPO DecArgs tPF tAO Body tAF

    tMAIN  shift, and go to state 11
    tID    shift, and go to state 12

    FunName  go to state 13


State 9

    0 $accept: Program $end .

    $default  accept


State 10

    3 Functions: Function Functions .

    $default  reduce using rule 3 (Functions)


State 11

   18 FunName: tMAIN .

    $default  reduce using rule 18 (FunName)


State 12

   19 FunName: tID .

    $default  reduce using rule 19 (FunName)


State 13

    4 Function: FunType FunName . tPO DecArgs tPF tAO Body tAF

    tPO  shift, and go to state 14


State 14

    4 Function: FunType FunName tPO . DecArgs tPF tAO Body tAF

    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 15
    Type     go to state 16


State 15

    4 Function: FunType FunName tPO DecArgs . tPF tAO Body tAF

    tPF  shift, and go to state 17


State 16

    6 DecArgs: Type . tID NextDecArg

    tID  shift, and go to state 18


State 17

    4 Function: FunType FunName tPO DecArgs tPF . tAO Body tAF

    tAO  shift, and go to state 19


State 18

    6 DecArgs: Type tID . NextDecArg

    tV  shift, and go to state 20

    $default  reduce using rule 9 (NextDecArg)

    NextDecArg  go to state 21


State 19

    4 Function: FunType FunName tPO DecArgs tPF tAO . Body tAF

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall                  go to state 25
    Type                     go to state 26
    FunName                  go to state 27
    Body                     go to state 28
    Instructions             go to state 29
    Instruction              go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 20

    8 NextDecArg: tV . DecArgs

    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3

    $default  reduce using rule 7 (DecArgs)

    DecArgs  go to state 36
    Type     go to state 16


State 21

    6 DecArgs: Type tID NextDecArg .

    $default  reduce using rule 6 (DecArgs)


State 22

   45 ifCondition: tIF . tPO ifBoolExpression tPF $@4 elseCondition

    tPO  shift, and go to state 37


State 23

   49 whileCondition: tWHILE . tPO whileBoolExpression tPF

    tPO  shift, and go to state 38


State 24

   19 FunName: tID .
   43 VarAssign: tID . tEQUAL Operand tPV

    tEQUAL  shift, and go to state 39

    $default  reduce using rule 19 (FunName)


State 25

   23 Instruction: FunCall .

    $default  reduce using rule 23 (Instruction)


State 26

   32 VarDeclarationAndAssign: Type . tID tEQUAL tNB tPV
   33                        | Type . tID tEQUAL tID tPV
   34 VarDeclaration: Type . tID tPV

    tID  shift, and go to state 40


State 27

    5 FunCall: FunName . tPO CallArgs tPF tPV

    tPO  shift, and go to state 41


State 28

    4 Function: FunType FunName tPO DecArgs tPF tAO Body . tAF

    tAF  shift, and go to state 42


State 29

   20 Body: Instructions .

    $default  reduce using rule 20 (Body)


State 30

   21 Instructions: Instruction . Instructions

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall                  go to state 25
    Type                     go to state 26
    FunName                  go to state 27
    Instructions             go to state 43
    Instruction              go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 31

   24 Instruction: VarDeclarationAndAssign .

    $default  reduce using rule 24 (Instruction)


State 32

   25 Instruction: VarDeclaration .

    $default  reduce using rule 25 (Instruction)


State 33

   26 Instruction: VarAssign .

    $default  reduce using rule 26 (Instruction)


State 34

   29 Instruction: ifCondition . tAO $@1 Body tAF $@2 elseCondition

    tAO  shift, and go to state 44


State 35

   31 Instruction: whileCondition . tAO $@3 Body tAF

    tAO  shift, and go to state 45


State 36

    8 NextDecArg: tV DecArgs .

    $default  reduce using rule 8 (NextDecArg)


State 37

   45 ifCondition: tIF tPO . ifBoolExpression tPF $@4 elseCondition

    tMAIN   shift, and go to state 11
    tTRUE   shift, and go to state 46
    tFALSE  shift, and go to state 47
    tNB     shift, and go to state 48
    tID     shift, and go to state 49

    FunCall           go to state 50
    FunName           go to state 27
    Operand           go to state 51
    Operations        go to state 52
    ifBoolExpression  go to state 53
    ifComparaison     go to state 54


State 38

   49 whileCondition: tWHILE tPO . whileBoolExpression tPF

    tMAIN   shift, and go to state 11
    tTRUE   shift, and go to state 55
    tFALSE  shift, and go to state 56
    tNB     shift, and go to state 48
    tID     shift, and go to state 57

    FunCall              go to state 50
    FunName              go to state 27
    Operand              go to state 58
    Operations           go to state 52
    whileBoolExpression  go to state 59
    whileComparaison     go to state 60


State 39

   43 VarAssign: tID tEQUAL . Operand tPV

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 62
    Operations  go to state 52


State 40

   32 VarDeclarationAndAssign: Type tID . tEQUAL tNB tPV
   33                        | Type tID . tEQUAL tID tPV
   34 VarDeclaration: Type tID . tPV

    tPV     shift, and go to state 63
    tEQUAL  shift, and go to state 64


State 41

    5 FunCall: FunName tPO . CallArgs tPF tPV

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 50
    CallArgs    go to state 65
    FunName     go to state 27
    Operand     go to state 66
    Operations  go to state 52


State 42

    4 Function: FunType FunName tPO DecArgs tPF tAO Body tAF .

    $default  reduce using rule 4 (Function)


State 43

   21 Instructions: Instruction Instructions .

    $default  reduce using rule 21 (Instructions)


State 44

   29 Instruction: ifCondition tAO . $@1 Body tAF $@2 elseCondition

    $default  reduce using rule 27 ($@1)

    $@1  go to state 67


State 45

   31 Instruction: whileCondition tAO . $@3 Body tAF

    $default  reduce using rule 30 ($@3)

    $@3  go to state 68


State 46

   52 ifBoolExpression: tTRUE .

    $default  reduce using rule 52 (ifBoolExpression)


State 47

   53 ifBoolExpression: tFALSE .

    $default  reduce using rule 53 (ifBoolExpression)


State 48

   38 Operand: tNB .

    $default  reduce using rule 38 (Operand)


State 49

   19 FunName: tID .
   37 Operand: tID .
   51 ifBoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 51 (ifBoolExpression)
    $default  reduce using rule 37 (Operand)


State 50

   35 Operand: FunCall .

    $default  reduce using rule 35 (Operand)


State 51

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   54 ifComparaison: Operand . tEQEQ Operand
   55              | Operand . tINF Operand
   56              | Operand . tSUP Operand

    tSUB   shift, and go to state 69
    tADD   shift, and go to state 70
    tMUL   shift, and go to state 71
    tDIV   shift, and go to state 72
    tINF   shift, and go to state 73
    tSUP   shift, and go to state 74
    tEQEQ  shift, and go to state 75


State 52

   36 Operand: Operations .

    $default  reduce using rule 36 (Operand)


State 53

   45 ifCondition: tIF tPO ifBoolExpression . tPF $@4 elseCondition

    tPF  shift, and go to state 76


State 54

   50 ifBoolExpression: ifComparaison .

    $default  reduce using rule 50 (ifBoolExpression)


State 55

   59 whileBoolExpression: tTRUE .

    $default  reduce using rule 59 (whileBoolExpression)


State 56

   60 whileBoolExpression: tFALSE .

    $default  reduce using rule 60 (whileBoolExpression)


State 57

   19 FunName: tID .
   37 Operand: tID .
   58 whileBoolExpression: tID .

    tPO       reduce using rule 19 (FunName)
    tPF       reduce using rule 58 (whileBoolExpression)
    $default  reduce using rule 37 (Operand)


State 58

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   61 whileComparaison: Operand . tEQEQ Operand
   62                 | Operand . tINF Operand
   63                 | Operand . tSUP Operand

    tSUB   shift, and go to state 69
    tADD   shift, and go to state 70
    tMUL   shift, and go to state 71
    tDIV   shift, and go to state 72
    tINF   shift, and go to state 77
    tSUP   shift, and go to state 78
    tEQEQ  shift, and go to state 79


State 59

   49 whileCondition: tWHILE tPO whileBoolExpression . tPF

    tPF  shift, and go to state 80


State 60

   57 whileBoolExpression: whileComparaison .

    $default  reduce using rule 57 (whileBoolExpression)


State 61

   19 FunName: tID .
   37 Operand: tID .

    tPO       reduce using rule 19 (FunName)
    $default  reduce using rule 37 (Operand)


State 62

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   43 VarAssign: tID tEQUAL Operand . tPV

    tPV   shift, and go to state 81
    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72


State 63

   34 VarDeclaration: Type tID tPV .

    $default  reduce using rule 34 (VarDeclaration)


State 64

   32 VarDeclarationAndAssign: Type tID tEQUAL . tNB tPV
   33                        | Type tID tEQUAL . tID tPV

    tNB  shift, and go to state 82
    tID  shift, and go to state 83


State 65

    5 FunCall: FunName tPO CallArgs . tPF tPV

    tPF  shift, and go to state 84


State 66

   10 CallArgs: Operand . CallArgNext
   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand

    tV    shift, and go to state 85
    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 13 (CallArgNext)

    CallArgNext  go to state 86


State 67

   29 Instruction: ifCondition tAO $@1 . Body tAF $@2 elseCondition

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall                  go to state 25
    Type                     go to state 26
    FunName                  go to state 27
    Body                     go to state 87
    Instructions             go to state 29
    Instruction              go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 68

   31 Instruction: whileCondition tAO $@3 . Body tAF

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall                  go to state 25
    Type                     go to state 26
    FunName                  go to state 27
    Body                     go to state 88
    Instructions             go to state 29
    Instruction              go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 69

   40 Operations: Operand tSUB . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 89
    Operations  go to state 52


State 70

   39 Operations: Operand tADD . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 90
    Operations  go to state 52


State 71

   41 Operations: Operand tMUL . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 91
    Operations  go to state 52


State 72

   42 Operations: Operand tDIV . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 92
    Operations  go to state 52


State 73

   55 ifComparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 93
    Operations  go to state 52


State 74

   56 ifComparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 94
    Operations  go to state 52


State 75

   54 ifComparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 95
    Operations  go to state 52


State 76

   45 ifCondition: tIF tPO ifBoolExpression tPF . $@4 elseCondition

    $default  reduce using rule 44 ($@4)

    $@4  go to state 96


State 77

   62 whileComparaison: Operand tINF . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 97
    Operations  go to state 52


State 78

   63 whileComparaison: Operand tSUP . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 98
    Operations  go to state 52


State 79

   61 whileComparaison: Operand tEQEQ . Operand

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    FunCall     go to state 50
    FunName     go to state 27
    Operand     go to state 99
    Operations  go to state 52


State 80

   49 whileCondition: tWHILE tPO whileBoolExpression tPF .

    $default  reduce using rule 49 (whileCondition)


State 81

   43 VarAssign: tID tEQUAL Operand tPV .

    $default  reduce using rule 43 (VarAssign)


State 82

   32 VarDeclarationAndAssign: Type tID tEQUAL tNB . tPV

    tPV  shift, and go to state 100


State 83

   33 VarDeclarationAndAssign: Type tID tEQUAL tID . tPV

    tPV  shift, and go to state 101


State 84

    5 FunCall: FunName tPO CallArgs tPF . tPV

    tPV  shift, and go to state 102


State 85

   12 CallArgNext: tV . CallArgs

    tMAIN  shift, and go to state 11
    tNB    shift, and go to state 48
    tID    shift, and go to state 61

    $default  reduce using rule 11 (CallArgs)

    FunCall     go to state 50
    CallArgs    go to state 103
    FunName     go to state 27
    Operand     go to state 66
    Operations  go to state 52


State 86

   10 CallArgs: Operand CallArgNext .

    $default  reduce using rule 10 (CallArgs)


State 87

   29 Instruction: ifCondition tAO $@1 Body . tAF $@2 elseCondition

    tAF  shift, and go to state 104


State 88

   31 Instruction: whileCondition tAO $@3 Body . tAF

    tAF  shift, and go to state 105


State 89

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   40           | Operand tSUB Operand .
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand

    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 40 (Operations)


State 90

   39 Operations: Operand . tADD Operand
   39           | Operand tADD Operand .
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand

    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 39 (Operations)


State 91

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   41           | Operand tMUL Operand .
   42           | Operand . tDIV Operand

    $default  reduce using rule 41 (Operations)


State 92

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   42           | Operand tDIV Operand .

    $default  reduce using rule 42 (Operations)


State 93

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   55 ifComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 55 (ifComparaison)


State 94

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   56 ifComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 56 (ifComparaison)


State 95

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   54 ifComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 54 (ifComparaison)


State 96

   45 ifCondition: tIF tPO ifBoolExpression tPF $@4 . elseCondition

    tELSE  shift, and go to state 106

    $default  reduce using rule 48 (elseCondition)

    elseCondition  go to state 107


State 97

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   62 whileComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 62 (whileComparaison)


State 98

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   63 whileComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 63 (whileComparaison)


State 99

   39 Operations: Operand . tADD Operand
   40           | Operand . tSUB Operand
   41           | Operand . tMUL Operand
   42           | Operand . tDIV Operand
   61 whileComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 69
    tADD  shift, and go to state 70
    tMUL  shift, and go to state 71
    tDIV  shift, and go to state 72

    $default  reduce using rule 61 (whileComparaison)


State 100

   32 VarDeclarationAndAssign: Type tID tEQUAL tNB tPV .

    $default  reduce using rule 32 (VarDeclarationAndAssign)


State 101

   33 VarDeclarationAndAssign: Type tID tEQUAL tID tPV .

    $default  reduce using rule 33 (VarDeclarationAndAssign)


State 102

    5 FunCall: FunName tPO CallArgs tPF tPV .

    $default  reduce using rule 5 (FunCall)


State 103

   12 CallArgNext: tV CallArgs .

    $default  reduce using rule 12 (CallArgNext)


State 104

   29 Instruction: ifCondition tAO $@1 Body tAF . $@2 elseCondition

    $default  reduce using rule 28 ($@2)

    $@2  go to state 108


State 105

   31 Instruction: whileCondition tAO $@3 Body tAF .

    $default  reduce using rule 31 (Instruction)


State 106

   47 elseCondition: tELSE . tAO $@5 Body tAF

    tAO  shift, and go to state 109


State 107

   45 ifCondition: tIF tPO ifBoolExpression tPF $@4 elseCondition .

    $default  reduce using rule 45 (ifCondition)


State 108

   29 Instruction: ifCondition tAO $@1 Body tAF $@2 . elseCondition

    tELSE  shift, and go to state 106

    $default  reduce using rule 48 (elseCondition)

    elseCondition  go to state 110


State 109

   47 elseCondition: tELSE tAO . $@5 Body tAF

    $default  reduce using rule 46 ($@5)

    $@5  go to state 111


State 110

   29 Instruction: ifCondition tAO $@1 Body tAF $@2 elseCondition .

    $default  reduce using rule 29 (Instruction)


State 111

   47 elseCondition: tELSE tAO $@5 . Body tAF

    tMAIN    shift, and go to state 11
    tIF      shift, and go to state 22
    tWHILE   shift, and go to state 23
    tINT     shift, and go to state 2
    tSTRING  shift, and go to state 3
    tID      shift, and go to state 24

    $default  reduce using rule 22 (Instructions)

    FunCall                  go to state 25
    Type                     go to state 26
    FunName                  go to state 27
    Body                     go to state 112
    Instructions             go to state 29
    Instruction              go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 112

   47 elseCondition: tELSE tAO $@5 Body . tAF

    tAF  shift, and go to state 113


State 113

   47 elseCondition: tELSE tAO $@5 Body tAF .

    $default  reduce using rule 47 (elseCondition)
