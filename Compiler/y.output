Nonterminals useless in grammar

    Comparator


Terminals unused in grammar

    tSTRING


Rules useless in grammar

   80 Comparator: tINF
   81           | tSUP
   82           | tEQEQ


Grammar

    0 $accept: Program $end

    1 Program: Main Functions

    2 Main: tVOID tMAIN tPO tPF tAO Body tAF

    3 Functions: Function
    4          | Function Functions

    5 $@1: %empty

    6 $@2: %empty

    7 $@3: %empty

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 tAF

    9 $@4: %empty

   10 $@5: %empty

   11 Function: tVOID tID tPO $@4 DecArgs tPF tAO $@5 Body tAF

   12 $@6: %empty

   13 $@7: %empty

   14 FunCall: tID $@6 tPO $@7 CallArgs tPF

   15 $@8: %empty

   16 DecArgs: tINT tID $@8 NextDecArg
   17        | %empty

   18 NextDecArg: tV DecArgs
   19           | %empty

   20 $@9: %empty

   21 CallArgs: tID $@9 CallArgNext
   22         | tNB CallArgNext
   23         | %empty

   24 CallArgNext: tV CallArgs
   25            | %empty

   26 Type: tCONST
   27     | %empty

   28 Body: Instructions

   29 Instructions: Instruction Instructions
   30             | %empty

   31 Instruction: FunCall tPV
   32            | Print
   33            | VarDeclarationAndAssign
   34            | VarDeclaration
   35            | VarAssign

   36 $@10: %empty

   37 $@11: %empty

   38 Instruction: ifCondition tAO $@10 Body tAF $@11 elseCondition

   39 $@12: %empty

   40 Instruction: whileCondition tAO $@12 Body tAF

   41 Print: tPRINT tPO PrintArg tPF tPV

   42 PrintArg: tID
   43         | tNB

   44 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV
   45                        | Type tINT tID tEQUAL tID tPV

   46 $@13: %empty

   47 VarDeclaration: Type tINT tID $@13 NextVar

   48 $@14: %empty

   49 NextVar: Type tV tID $@14 NextVar
   50        | tPV

   51 Operand: FunCall
   52        | Operations
   53        | tID
   54        | tNB

   55 Operations: Operand tADD Operand
   56           | Operand tSUB Operand
   57           | Operand tMUL Operand
   58           | Operand tDIV Operand

   59 VarAssign: tID tEQUAL Operand tPV

   60 $@15: %empty

   61 ifCondition: tIF tPO ifBoolExpression tPF $@15 elseCondition

   62 $@16: %empty

   63 elseCondition: tELSE tAO $@16 Body tAF
   64              | %empty

   65 whileCondition: tWHILE tPO whileBoolExpression tPF

   66 ifBoolExpression: ifComparaison
   67                 | tID
   68                 | tTRUE
   69                 | tFALSE

   70 ifComparaison: Operand tEQEQ Operand
   71              | Operand tINF Operand
   72              | Operand tSUP Operand

   73 whileBoolExpression: whileComparaison
   74                    | tID
   75                    | tTRUE
   76                    | tFALSE

   77 whileComparaison: Operand tEQEQ Operand
   78                 | Operand tINF Operand
   79                 | Operand tSUP Operand


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    tMAIN (258) 2
    tRETURN (259) 8
    tIF (260) 61
    tWHILE (261) 65
    tPRINT (262) 41
    tELSE (263) 63
    tAO (264) 2 8 11 38 40 63
    tAF (265) 2 8 11 38 40 63
    tPO (266) 2 8 11 14 41 61 65
    tPF (267) 2 8 11 14 41 61 65
    tV (268) 18 24 49
    tPV (269) 8 31 41 44 45 50 59
    tEQUAL (270) 44 45 59
    tVOID (271) 2 11
    tINT (272) 8 16 44 45 47
    tSTRING (273)
    tSUB (274) 56
    tADD (275) 55
    tMUL (276) 57
    tDIV (277) 58
    tINF (278) 71 78
    tSUP (279) 72 79
    tEQEQ (280) 70 77
    tTRUE (281) 68 75
    tFALSE (282) 69 76
    tCONST (283) 26
    tNB <nb> (284) 22 43 44 54
    tID <string> (285) 8 11 14 16 21 42 44 45 47 49 53 59 67 74


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    Program (32)
        on left: 1
        on right: 0
    Main (33)
        on left: 2
        on right: 1
    Functions (34)
        on left: 3 4
        on right: 1 4
    Function (35)
        on left: 8 11
        on right: 3 4
    $@1 (36)
        on left: 5
        on right: 8
    $@2 (37)
        on left: 6
        on right: 8
    $@3 (38)
        on left: 7
        on right: 8
    $@4 (39)
        on left: 9
        on right: 11
    $@5 (40)
        on left: 10
        on right: 11
    FunCall <string> (41)
        on left: 14
        on right: 31 51
    $@6 (42)
        on left: 12
        on right: 14
    $@7 (43)
        on left: 13
        on right: 14
    DecArgs (44)
        on left: 16 17
        on right: 8 11 18
    $@8 (45)
        on left: 15
        on right: 16
    NextDecArg (46)
        on left: 18 19
        on right: 16
    CallArgs (47)
        on left: 21 22 23
        on right: 14 24
    $@9 (48)
        on left: 20
        on right: 21
    CallArgNext (49)
        on left: 24 25
        on right: 21 22
    Type <nb> (50)
        on left: 26 27
        on right: 44 45 47 49
    Body (51)
        on left: 28
        on right: 2 8 11 38 40 63
    Instructions (52)
        on left: 29 30
        on right: 28 29
    Instruction (53)
        on left: 31 32 33 34 35 38 40
        on right: 29
    $@10 (54)
        on left: 36
        on right: 38
    $@11 (55)
        on left: 37
        on right: 38
    $@12 (56)
        on left: 39
        on right: 40
    Print (57)
        on left: 41
        on right: 32
    PrintArg (58)
        on left: 42 43
        on right: 41
    VarDeclarationAndAssign (59)
        on left: 44 45
        on right: 33
    VarDeclaration (60)
        on left: 47
        on right: 34
    $@13 (61)
        on left: 46
        on right: 47
    NextVar (62)
        on left: 49 50
        on right: 47 49
    $@14 (63)
        on left: 48
        on right: 49
    Operand (64)
        on left: 51 52 53 54
        on right: 55 56 57 58 59 70 71 72 77 78 79
    Operations (65)
        on left: 55 56 57 58
        on right: 52
    VarAssign (66)
        on left: 59
        on right: 35
    ifCondition (67)
        on left: 61
        on right: 38
    $@15 (68)
        on left: 60
        on right: 61
    elseCondition (69)
        on left: 63 64
        on right: 38 61
    $@16 (70)
        on left: 62
        on right: 63
    whileCondition (71)
        on left: 65
        on right: 40
    ifBoolExpression (72)
        on left: 66 67 68 69
        on right: 61
    ifComparaison (73)
        on left: 70 71 72
        on right: 66
    whileBoolExpression (74)
        on left: 73 74 75 76
        on right: 65
    whileComparaison (75)
        on left: 77 78 79
        on right: 73


State 0

    0 $accept: . Program $end

    tVOID  shift, and go to state 1

    Program  go to state 2
    Main     go to state 3


State 1

    2 Main: tVOID . tMAIN tPO tPF tAO Body tAF

    tMAIN  shift, and go to state 4


State 2

    0 $accept: Program . $end

    $end  shift, and go to state 5


State 3

    1 Program: Main . Functions

    tVOID  shift, and go to state 6
    tINT   shift, and go to state 7

    Functions  go to state 8
    Function   go to state 9


State 4

    2 Main: tVOID tMAIN . tPO tPF tAO Body tAF

    tPO  shift, and go to state 10


State 5

    0 $accept: Program $end .

    $default  accept


State 6

   11 Function: tVOID . tID tPO $@4 DecArgs tPF tAO $@5 Body tAF

    tID  shift, and go to state 11


State 7

    8 Function: tINT . tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 tAF

    tID  shift, and go to state 12


State 8

    1 Program: Main Functions .

    $default  reduce using rule 1 (Program)


State 9

    3 Functions: Function .
    4          | Function . Functions

    tVOID  shift, and go to state 6
    tINT   shift, and go to state 7

    $default  reduce using rule 3 (Functions)

    Functions  go to state 13
    Function   go to state 9


State 10

    2 Main: tVOID tMAIN tPO . tPF tAO Body tAF

    tPF  shift, and go to state 14


State 11

   11 Function: tVOID tID . tPO $@4 DecArgs tPF tAO $@5 Body tAF

    tPO  shift, and go to state 15


State 12

    8 Function: tINT tID . tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 tAF

    tPO  shift, and go to state 16


State 13

    4 Functions: Function Functions .

    $default  reduce using rule 4 (Functions)


State 14

    2 Main: tVOID tMAIN tPO tPF . tAO Body tAF

    tAO  shift, and go to state 17


State 15

   11 Function: tVOID tID tPO . $@4 DecArgs tPF tAO $@5 Body tAF

    $default  reduce using rule 9 ($@4)

    $@4  go to state 18


State 16

    8 Function: tINT tID tPO . $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 tAF

    $default  reduce using rule 5 ($@1)

    $@1  go to state 19


State 17

    2 Main: tVOID tMAIN tPO tPF tAO . Body tAF

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tAF       reduce using rule 30 (Instructions)
    $default  reduce using rule 27 (Type)

    FunCall                  go to state 25
    Type                     go to state 26
    Body                     go to state 27
    Instructions             go to state 28
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 18

   11 Function: tVOID tID tPO $@4 . DecArgs tPF tAO $@5 Body tAF

    tINT  shift, and go to state 36

    $default  reduce using rule 17 (DecArgs)

    DecArgs  go to state 37


State 19

    8 Function: tINT tID tPO $@1 . DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 tAF

    tINT  shift, and go to state 36

    $default  reduce using rule 17 (DecArgs)

    DecArgs  go to state 38


State 20

   61 ifCondition: tIF . tPO ifBoolExpression tPF $@15 elseCondition

    tPO  shift, and go to state 39


State 21

   65 whileCondition: tWHILE . tPO whileBoolExpression tPF

    tPO  shift, and go to state 40


State 22

   41 Print: tPRINT . tPO PrintArg tPF tPV

    tPO  shift, and go to state 41


State 23

   26 Type: tCONST .

    $default  reduce using rule 26 (Type)


State 24

   14 FunCall: tID . $@6 tPO $@7 CallArgs tPF
   59 VarAssign: tID . tEQUAL Operand tPV

    tEQUAL  shift, and go to state 42

    $default  reduce using rule 12 ($@6)

    $@6  go to state 43


State 25

   31 Instruction: FunCall . tPV

    tPV  shift, and go to state 44


State 26

   44 VarDeclarationAndAssign: Type . tINT tID tEQUAL tNB tPV
   45                        | Type . tINT tID tEQUAL tID tPV
   47 VarDeclaration: Type . tINT tID $@13 NextVar

    tINT  shift, and go to state 45


State 27

    2 Main: tVOID tMAIN tPO tPF tAO Body . tAF

    tAF  shift, and go to state 46


State 28

   28 Body: Instructions .

    $default  reduce using rule 28 (Body)


State 29

   29 Instructions: Instruction . Instructions

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tINT      reduce using rule 27 (Type)
    $default  reduce using rule 30 (Instructions)

    FunCall                  go to state 25
    Type                     go to state 26
    Instructions             go to state 47
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 30

   32 Instruction: Print .

    $default  reduce using rule 32 (Instruction)


State 31

   33 Instruction: VarDeclarationAndAssign .

    $default  reduce using rule 33 (Instruction)


State 32

   34 Instruction: VarDeclaration .

    $default  reduce using rule 34 (Instruction)


State 33

   35 Instruction: VarAssign .

    $default  reduce using rule 35 (Instruction)


State 34

   38 Instruction: ifCondition . tAO $@10 Body tAF $@11 elseCondition

    tAO  shift, and go to state 48


State 35

   40 Instruction: whileCondition . tAO $@12 Body tAF

    tAO  shift, and go to state 49


State 36

   16 DecArgs: tINT . tID $@8 NextDecArg

    tID  shift, and go to state 50


State 37

   11 Function: tVOID tID tPO $@4 DecArgs . tPF tAO $@5 Body tAF

    tPF  shift, and go to state 51


State 38

    8 Function: tINT tID tPO $@1 DecArgs . tPF tAO $@2 Body tRETURN tID tPV $@3 tAF

    tPF  shift, and go to state 52


State 39

   61 ifCondition: tIF tPO . ifBoolExpression tPF $@15 elseCondition

    tTRUE   shift, and go to state 53
    tFALSE  shift, and go to state 54
    tNB     shift, and go to state 55
    tID     shift, and go to state 56

    FunCall           go to state 57
    Operand           go to state 58
    Operations        go to state 59
    ifBoolExpression  go to state 60
    ifComparaison     go to state 61


State 40

   65 whileCondition: tWHILE tPO . whileBoolExpression tPF

    tTRUE   shift, and go to state 62
    tFALSE  shift, and go to state 63
    tNB     shift, and go to state 55
    tID     shift, and go to state 64

    FunCall              go to state 57
    Operand              go to state 65
    Operations           go to state 59
    whileBoolExpression  go to state 66
    whileComparaison     go to state 67


State 41

   41 Print: tPRINT tPO . PrintArg tPF tPV

    tNB  shift, and go to state 68
    tID  shift, and go to state 69

    PrintArg  go to state 70


State 42

   59 VarAssign: tID tEQUAL . Operand tPV

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 72
    Operations  go to state 59


State 43

   14 FunCall: tID $@6 . tPO $@7 CallArgs tPF

    tPO  shift, and go to state 73


State 44

   31 Instruction: FunCall tPV .

    $default  reduce using rule 31 (Instruction)


State 45

   44 VarDeclarationAndAssign: Type tINT . tID tEQUAL tNB tPV
   45                        | Type tINT . tID tEQUAL tID tPV
   47 VarDeclaration: Type tINT . tID $@13 NextVar

    tID  shift, and go to state 74


State 46

    2 Main: tVOID tMAIN tPO tPF tAO Body tAF .

    $default  reduce using rule 2 (Main)


State 47

   29 Instructions: Instruction Instructions .

    $default  reduce using rule 29 (Instructions)


State 48

   38 Instruction: ifCondition tAO . $@10 Body tAF $@11 elseCondition

    $default  reduce using rule 36 ($@10)

    $@10  go to state 75


State 49

   40 Instruction: whileCondition tAO . $@12 Body tAF

    $default  reduce using rule 39 ($@12)

    $@12  go to state 76


State 50

   16 DecArgs: tINT tID . $@8 NextDecArg

    $default  reduce using rule 15 ($@8)

    $@8  go to state 77


State 51

   11 Function: tVOID tID tPO $@4 DecArgs tPF . tAO $@5 Body tAF

    tAO  shift, and go to state 78


State 52

    8 Function: tINT tID tPO $@1 DecArgs tPF . tAO $@2 Body tRETURN tID tPV $@3 tAF

    tAO  shift, and go to state 79


State 53

   68 ifBoolExpression: tTRUE .

    $default  reduce using rule 68 (ifBoolExpression)


State 54

   69 ifBoolExpression: tFALSE .

    $default  reduce using rule 69 (ifBoolExpression)


State 55

   54 Operand: tNB .

    $default  reduce using rule 54 (Operand)


State 56

   14 FunCall: tID . $@6 tPO $@7 CallArgs tPF
   53 Operand: tID .
   67 ifBoolExpression: tID .

    tPO       reduce using rule 12 ($@6)
    tPF       reduce using rule 67 (ifBoolExpression)
    $default  reduce using rule 53 (Operand)

    $@6  go to state 43


State 57

   51 Operand: FunCall .

    $default  reduce using rule 51 (Operand)


State 58

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   70 ifComparaison: Operand . tEQEQ Operand
   71              | Operand . tINF Operand
   72              | Operand . tSUP Operand

    tSUB   shift, and go to state 80
    tADD   shift, and go to state 81
    tMUL   shift, and go to state 82
    tDIV   shift, and go to state 83
    tINF   shift, and go to state 84
    tSUP   shift, and go to state 85
    tEQEQ  shift, and go to state 86


State 59

   52 Operand: Operations .

    $default  reduce using rule 52 (Operand)


State 60

   61 ifCondition: tIF tPO ifBoolExpression . tPF $@15 elseCondition

    tPF  shift, and go to state 87


State 61

   66 ifBoolExpression: ifComparaison .

    $default  reduce using rule 66 (ifBoolExpression)


State 62

   75 whileBoolExpression: tTRUE .

    $default  reduce using rule 75 (whileBoolExpression)


State 63

   76 whileBoolExpression: tFALSE .

    $default  reduce using rule 76 (whileBoolExpression)


State 64

   14 FunCall: tID . $@6 tPO $@7 CallArgs tPF
   53 Operand: tID .
   74 whileBoolExpression: tID .

    tPO       reduce using rule 12 ($@6)
    tPF       reduce using rule 74 (whileBoolExpression)
    $default  reduce using rule 53 (Operand)

    $@6  go to state 43


State 65

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   77 whileComparaison: Operand . tEQEQ Operand
   78                 | Operand . tINF Operand
   79                 | Operand . tSUP Operand

    tSUB   shift, and go to state 80
    tADD   shift, and go to state 81
    tMUL   shift, and go to state 82
    tDIV   shift, and go to state 83
    tINF   shift, and go to state 88
    tSUP   shift, and go to state 89
    tEQEQ  shift, and go to state 90


State 66

   65 whileCondition: tWHILE tPO whileBoolExpression . tPF

    tPF  shift, and go to state 91


State 67

   73 whileBoolExpression: whileComparaison .

    $default  reduce using rule 73 (whileBoolExpression)


State 68

   43 PrintArg: tNB .

    $default  reduce using rule 43 (PrintArg)


State 69

   42 PrintArg: tID .

    $default  reduce using rule 42 (PrintArg)


State 70

   41 Print: tPRINT tPO PrintArg . tPF tPV

    tPF  shift, and go to state 92


State 71

   14 FunCall: tID . $@6 tPO $@7 CallArgs tPF
   53 Operand: tID .

    tPO       reduce using rule 12 ($@6)
    $default  reduce using rule 53 (Operand)

    $@6  go to state 43


State 72

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   59 VarAssign: tID tEQUAL Operand . tPV

    tPV   shift, and go to state 93
    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83


State 73

   14 FunCall: tID $@6 tPO . $@7 CallArgs tPF

    $default  reduce using rule 13 ($@7)

    $@7  go to state 94


State 74

   44 VarDeclarationAndAssign: Type tINT tID . tEQUAL tNB tPV
   45                        | Type tINT tID . tEQUAL tID tPV
   47 VarDeclaration: Type tINT tID . $@13 NextVar

    tEQUAL  shift, and go to state 95

    $default  reduce using rule 46 ($@13)

    $@13  go to state 96


State 75

   38 Instruction: ifCondition tAO $@10 . Body tAF $@11 elseCondition

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tAF       reduce using rule 30 (Instructions)
    $default  reduce using rule 27 (Type)

    FunCall                  go to state 25
    Type                     go to state 26
    Body                     go to state 97
    Instructions             go to state 28
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 76

   40 Instruction: whileCondition tAO $@12 . Body tAF

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tAF       reduce using rule 30 (Instructions)
    $default  reduce using rule 27 (Type)

    FunCall                  go to state 25
    Type                     go to state 26
    Body                     go to state 98
    Instructions             go to state 28
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 77

   16 DecArgs: tINT tID $@8 . NextDecArg

    tV  shift, and go to state 99

    $default  reduce using rule 19 (NextDecArg)

    NextDecArg  go to state 100


State 78

   11 Function: tVOID tID tPO $@4 DecArgs tPF tAO . $@5 Body tAF

    $default  reduce using rule 10 ($@5)

    $@5  go to state 101


State 79

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO . $@2 Body tRETURN tID tPV $@3 tAF

    $default  reduce using rule 6 ($@2)

    $@2  go to state 102


State 80

   56 Operations: Operand tSUB . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 103
    Operations  go to state 59


State 81

   55 Operations: Operand tADD . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 104
    Operations  go to state 59


State 82

   57 Operations: Operand tMUL . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 105
    Operations  go to state 59


State 83

   58 Operations: Operand tDIV . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 106
    Operations  go to state 59


State 84

   71 ifComparaison: Operand tINF . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 107
    Operations  go to state 59


State 85

   72 ifComparaison: Operand tSUP . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 108
    Operations  go to state 59


State 86

   70 ifComparaison: Operand tEQEQ . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 109
    Operations  go to state 59


State 87

   61 ifCondition: tIF tPO ifBoolExpression tPF . $@15 elseCondition

    $default  reduce using rule 60 ($@15)

    $@15  go to state 110


State 88

   78 whileComparaison: Operand tINF . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 111
    Operations  go to state 59


State 89

   79 whileComparaison: Operand tSUP . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 112
    Operations  go to state 59


State 90

   77 whileComparaison: Operand tEQEQ . Operand

    tNB  shift, and go to state 55
    tID  shift, and go to state 71

    FunCall     go to state 57
    Operand     go to state 113
    Operations  go to state 59


State 91

   65 whileCondition: tWHILE tPO whileBoolExpression tPF .

    $default  reduce using rule 65 (whileCondition)


State 92

   41 Print: tPRINT tPO PrintArg tPF . tPV

    tPV  shift, and go to state 114


State 93

   59 VarAssign: tID tEQUAL Operand tPV .

    $default  reduce using rule 59 (VarAssign)


State 94

   14 FunCall: tID $@6 tPO $@7 . CallArgs tPF

    tNB  shift, and go to state 115
    tID  shift, and go to state 116

    $default  reduce using rule 23 (CallArgs)

    CallArgs  go to state 117


State 95

   44 VarDeclarationAndAssign: Type tINT tID tEQUAL . tNB tPV
   45                        | Type tINT tID tEQUAL . tID tPV

    tNB  shift, and go to state 118
    tID  shift, and go to state 119


State 96

   47 VarDeclaration: Type tINT tID $@13 . NextVar

    tPV     shift, and go to state 120
    tCONST  shift, and go to state 23

    $default  reduce using rule 27 (Type)

    Type     go to state 121
    NextVar  go to state 122


State 97

   38 Instruction: ifCondition tAO $@10 Body . tAF $@11 elseCondition

    tAF  shift, and go to state 123


State 98

   40 Instruction: whileCondition tAO $@12 Body . tAF

    tAF  shift, and go to state 124


State 99

   18 NextDecArg: tV . DecArgs

    tINT  shift, and go to state 36

    $default  reduce using rule 17 (DecArgs)

    DecArgs  go to state 125


State 100

   16 DecArgs: tINT tID $@8 NextDecArg .

    $default  reduce using rule 16 (DecArgs)


State 101

   11 Function: tVOID tID tPO $@4 DecArgs tPF tAO $@5 . Body tAF

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tAF       reduce using rule 30 (Instructions)
    $default  reduce using rule 27 (Type)

    FunCall                  go to state 25
    Type                     go to state 26
    Body                     go to state 126
    Instructions             go to state 28
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 102

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 . Body tRETURN tID tPV $@3 tAF

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tRETURN   reduce using rule 30 (Instructions)
    $default  reduce using rule 27 (Type)

    FunCall                  go to state 25
    Type                     go to state 26
    Body                     go to state 127
    Instructions             go to state 28
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 103

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   56           | Operand tSUB Operand .
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand

    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 56 (Operations)


State 104

   55 Operations: Operand . tADD Operand
   55           | Operand tADD Operand .
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand

    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 55 (Operations)


State 105

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   57           | Operand tMUL Operand .
   58           | Operand . tDIV Operand

    $default  reduce using rule 57 (Operations)


State 106

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   58           | Operand tDIV Operand .

    $default  reduce using rule 58 (Operations)


State 107

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   71 ifComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 71 (ifComparaison)


State 108

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   72 ifComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 72 (ifComparaison)


State 109

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   70 ifComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 70 (ifComparaison)


State 110

   61 ifCondition: tIF tPO ifBoolExpression tPF $@15 . elseCondition

    tELSE  shift, and go to state 128

    $default  reduce using rule 64 (elseCondition)

    elseCondition  go to state 129


State 111

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   78 whileComparaison: Operand tINF Operand .

    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 78 (whileComparaison)


State 112

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   79 whileComparaison: Operand tSUP Operand .

    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 79 (whileComparaison)


State 113

   55 Operations: Operand . tADD Operand
   56           | Operand . tSUB Operand
   57           | Operand . tMUL Operand
   58           | Operand . tDIV Operand
   77 whileComparaison: Operand tEQEQ Operand .

    tSUB  shift, and go to state 80
    tADD  shift, and go to state 81
    tMUL  shift, and go to state 82
    tDIV  shift, and go to state 83

    $default  reduce using rule 77 (whileComparaison)


State 114

   41 Print: tPRINT tPO PrintArg tPF tPV .

    $default  reduce using rule 41 (Print)


State 115

   22 CallArgs: tNB . CallArgNext

    tV  shift, and go to state 130

    $default  reduce using rule 25 (CallArgNext)

    CallArgNext  go to state 131


State 116

   21 CallArgs: tID . $@9 CallArgNext

    $default  reduce using rule 20 ($@9)

    $@9  go to state 132


State 117

   14 FunCall: tID $@6 tPO $@7 CallArgs . tPF

    tPF  shift, and go to state 133


State 118

   44 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB . tPV

    tPV  shift, and go to state 134


State 119

   45 VarDeclarationAndAssign: Type tINT tID tEQUAL tID . tPV

    tPV  shift, and go to state 135


State 120

   50 NextVar: tPV .

    $default  reduce using rule 50 (NextVar)


State 121

   49 NextVar: Type . tV tID $@14 NextVar

    tV  shift, and go to state 136


State 122

   47 VarDeclaration: Type tINT tID $@13 NextVar .

    $default  reduce using rule 47 (VarDeclaration)


State 123

   38 Instruction: ifCondition tAO $@10 Body tAF . $@11 elseCondition

    $default  reduce using rule 37 ($@11)

    $@11  go to state 137


State 124

   40 Instruction: whileCondition tAO $@12 Body tAF .

    $default  reduce using rule 40 (Instruction)


State 125

   18 NextDecArg: tV DecArgs .

    $default  reduce using rule 18 (NextDecArg)


State 126

   11 Function: tVOID tID tPO $@4 DecArgs tPF tAO $@5 Body . tAF

    tAF  shift, and go to state 138


State 127

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body . tRETURN tID tPV $@3 tAF

    tRETURN  shift, and go to state 139


State 128

   63 elseCondition: tELSE . tAO $@16 Body tAF

    tAO  shift, and go to state 140


State 129

   61 ifCondition: tIF tPO ifBoolExpression tPF $@15 elseCondition .

    $default  reduce using rule 61 (ifCondition)


State 130

   24 CallArgNext: tV . CallArgs

    tNB  shift, and go to state 115
    tID  shift, and go to state 116

    $default  reduce using rule 23 (CallArgs)

    CallArgs  go to state 141


State 131

   22 CallArgs: tNB CallArgNext .

    $default  reduce using rule 22 (CallArgs)


State 132

   21 CallArgs: tID $@9 . CallArgNext

    tV  shift, and go to state 130

    $default  reduce using rule 25 (CallArgNext)

    CallArgNext  go to state 142


State 133

   14 FunCall: tID $@6 tPO $@7 CallArgs tPF .

    $default  reduce using rule 14 (FunCall)


State 134

   44 VarDeclarationAndAssign: Type tINT tID tEQUAL tNB tPV .

    $default  reduce using rule 44 (VarDeclarationAndAssign)


State 135

   45 VarDeclarationAndAssign: Type tINT tID tEQUAL tID tPV .

    $default  reduce using rule 45 (VarDeclarationAndAssign)


State 136

   49 NextVar: Type tV . tID $@14 NextVar

    tID  shift, and go to state 143


State 137

   38 Instruction: ifCondition tAO $@10 Body tAF $@11 . elseCondition

    tELSE  shift, and go to state 128

    $default  reduce using rule 64 (elseCondition)

    elseCondition  go to state 144


State 138

   11 Function: tVOID tID tPO $@4 DecArgs tPF tAO $@5 Body tAF .

    $default  reduce using rule 11 (Function)


State 139

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN . tID tPV $@3 tAF

    tID  shift, and go to state 145


State 140

   63 elseCondition: tELSE tAO . $@16 Body tAF

    $default  reduce using rule 62 ($@16)

    $@16  go to state 146


State 141

   24 CallArgNext: tV CallArgs .

    $default  reduce using rule 24 (CallArgNext)


State 142

   21 CallArgs: tID $@9 CallArgNext .

    $default  reduce using rule 21 (CallArgs)


State 143

   49 NextVar: Type tV tID . $@14 NextVar

    $default  reduce using rule 48 ($@14)

    $@14  go to state 147


State 144

   38 Instruction: ifCondition tAO $@10 Body tAF $@11 elseCondition .

    $default  reduce using rule 38 (Instruction)


State 145

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID . tPV $@3 tAF

    tPV  shift, and go to state 148


State 146

   63 elseCondition: tELSE tAO $@16 . Body tAF

    tIF     shift, and go to state 20
    tWHILE  shift, and go to state 21
    tPRINT  shift, and go to state 22
    tCONST  shift, and go to state 23
    tID     shift, and go to state 24

    tAF       reduce using rule 30 (Instructions)
    $default  reduce using rule 27 (Type)

    FunCall                  go to state 25
    Type                     go to state 26
    Body                     go to state 149
    Instructions             go to state 28
    Instruction              go to state 29
    Print                    go to state 30
    VarDeclarationAndAssign  go to state 31
    VarDeclaration           go to state 32
    VarAssign                go to state 33
    ifCondition              go to state 34
    whileCondition           go to state 35


State 147

   49 NextVar: Type tV tID $@14 . NextVar

    tPV     shift, and go to state 120
    tCONST  shift, and go to state 23

    $default  reduce using rule 27 (Type)

    Type     go to state 121
    NextVar  go to state 150


State 148

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV . $@3 tAF

    $default  reduce using rule 7 ($@3)

    $@3  go to state 151


State 149

   63 elseCondition: tELSE tAO $@16 Body . tAF

    tAF  shift, and go to state 152


State 150

   49 NextVar: Type tV tID $@14 NextVar .

    $default  reduce using rule 49 (NextVar)


State 151

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 . tAF

    tAF  shift, and go to state 153


State 152

   63 elseCondition: tELSE tAO $@16 Body tAF .

    $default  reduce using rule 63 (elseCondition)


State 153

    8 Function: tINT tID tPO $@1 DecArgs tPF tAO $@2 Body tRETURN tID tPV $@3 tAF .

    $default  reduce using rule 8 (Function)
